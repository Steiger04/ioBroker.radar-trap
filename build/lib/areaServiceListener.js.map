{
  "version": 3,
  "sources": ["../../src/lib/areaServiceListener.ts"],
  "sourcesContent": ["import { createAreaObjects } from \"./createAreaObjects\";\nimport { Scheduler } from \"./Scheduler\";\n\nimport type { Application } from \"@feathersjs/express\";\nimport type * as utils from \"@iobroker/adapter-core\";\nimport type { HookContext } from \"../server/app\";\n\nconst areaServiceListener = (\n\tthat: utils.AdapterInstance,\n\tfeathers: Application,\n): void => {\n\tfeathers\n\t\t.service(\"areas\")\n\t\t.on(\"status\", async (statusWithId: radarTrap.GenericStatusWithId) => {\n\t\t\tScheduler.setStatus(statusWithId);\n\t\t});\n\n\tfeathers.service(\"areas\").on(\"removed\", async (area: radarTrap.Area) => {\n\t\tawait that.deleteDeviceAsync(area._id);\n\n\t\tScheduler.delete(area._id);\n\t});\n\n\tfeathers\n\t\t.service(\"areas\")\n\t\t.on(\"created\", async (area: radarTrap.Area, ctx: HookContext) => {\n\t\t\tif (!ctx.params.patchSourceFromServer) {\n\t\t\t\tconst areaData = {\n\t\t\t\t\t_id: area._id,\n\t\t\t\t\tcron: area.cron,\n\t\t\t\t\tareaPolygons: area.areaPolygons,\n\t\t\t\t};\n\n\t\t\t\tScheduler.schedule(areaData, \"AREA\");\n\t\t\t}\n\n\t\t\tawait createAreaObjects(that, area);\n\t\t});\n};\n\nexport { areaServiceListener };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAkC;AAClC,uBAA0B;AAM1B,MAAM,sBAAsB,CAC3B,MACA,aACU;AACV,WACE,QAAQ,OAAO,EACf,GAAG,UAAU,OAAO,iBAAgD;AACpE,+BAAU,UAAU,YAAY;AAAA,EACjC,CAAC;AAEF,WAAS,QAAQ,OAAO,EAAE,GAAG,WAAW,OAAO,SAAyB;AACvE,UAAM,KAAK,kBAAkB,KAAK,GAAG;AAErC,+BAAU,OAAO,KAAK,GAAG;AAAA,EAC1B,CAAC;AAED,WACE,QAAQ,OAAO,EACf,GAAG,WAAW,OAAO,MAAsB,QAAqB;AAChE,QAAI,CAAC,IAAI,OAAO,uBAAuB;AACtC,YAAM,WAAW;AAAA,QAChB,KAAK,KAAK;AAAA,QACV,MAAM,KAAK;AAAA,QACX,cAAc,KAAK;AAAA,MACpB;AAEA,iCAAU,SAAS,UAAU,MAAM;AAAA,IACpC;AAEA,cAAM,4CAAkB,MAAM,IAAI;AAAA,EACnC,CAAC;AACH;",
  "names": []
}
