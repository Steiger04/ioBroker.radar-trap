{
  "version": 3,
  "sources": ["../../src/lib/getPoiPolyPointsAsync.ts"],
  "sourcesContent": ["import {\n\tBBox,\n\tFeature,\n\tLineString,\n\tPoint,\n\tPolygon,\n\tarea,\n\tbbox,\n\tbboxPolygon,\n\tbooleanDisjoint,\n\tbuffer,\n\tfeatureCollection,\n\tpointToLineDistance,\n\tpointsWithinPolygon,\n\tsquareGrid,\n} from \"@turf/turf\";\nimport { getDevisor } from \"./getDevisor\";\nimport { traps } from \"./atudo/traps\";\n\nexport enum AnalyzedType {\n\tPOLYGONE,\n\tLINESTRING,\n}\n\ntype Options = {\n\tanalyzedFeature: Feature<Polygon> | Feature<LineString>;\n\ttype: AnalyzedType;\n\tmaxTrapDistance?: number | undefined;\n};\n\nconst getPoiPolyPointsAsync = async ({\n\tanalyzedFeature,\n\ttype,\n\tmaxTrapDistance,\n}: Options): Promise<{\n\tresultPoiPoints: Feature<Point, radarTrap.Poi>[];\n\tresultPolyLines: Feature<LineString, radarTrap.Poly>[];\n}> => {\n\t// const areaPolygon = Object.values(data!.areaPolygons!)[0];\n\tconst analyzedBbox = bbox(analyzedFeature);\n\tconst analyzedBox = bboxPolygon(analyzedBbox);\n\n\tconst sideLength = Math.sqrt(area(analyzedBox)) / 1_000;\n\tif (process.env.NODE_ENV === \"development\") console.log(\"sideLength >>>\", sideLength);\n\n\tconst sideLengthDivisor = getDevisor(sideLength);\n\tif (process.env.NODE_ENV === \"development\") console.log(\"sideLengthDivisor >>>\", sideLengthDivisor);\n\n\tconst cellWidth = sideLength / sideLengthDivisor;\n\n\tlet bufferedBbox: BBox;\n\n\tswitch (type) {\n\t\tcase AnalyzedType.POLYGONE:\n\t\t\tbufferedBbox = bbox(buffer(analyzedFeature, cellWidth, { units: \"kilometers\" }));\n\t\t\tbreak;\n\t\tcase AnalyzedType.LINESTRING:\n\t\t\tbufferedBbox = bbox(buffer(analyzedBox, cellWidth, { units: \"kilometers\" }));\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new Error(\"Invalid type in getPoiPolyPointsAsync\");\n\t}\n\n\tconst squareBoxGrid = squareGrid(bufferedBbox, cellWidth);\n\tif (process.env.NODE_ENV === \"development\") console.log(\"squareBoxGrid >>>\", squareBoxGrid.features.length);\n\n\tconst squareBoxGridReduced = squareBoxGrid.features.filter((feature) => !booleanDisjoint(feature, analyzedFeature));\n\tif (process.env.NODE_ENV === \"development\") console.log(\"squareBoxGridReduced >>>\", squareBoxGridReduced.length);\n\n\tlet resultPoiPoints: Feature<Point, radarTrap.Poi>[] = [];\n\tlet resultPolyLines: Feature<LineString, radarTrap.Poly>[] = [];\n\n\tfor (const feature of squareBoxGridReduced) {\n\t\tconst tmpBbox = bbox(feature);\n\n\t\tconst { poiPoints, polyLines } = await traps(\n\t\t\t{\n\t\t\t\tlng: tmpBbox[0],\n\t\t\t\tlat: tmpBbox[1],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlng: tmpBbox[2],\n\t\t\t\tlat: tmpBbox[3],\n\t\t\t},\n\t\t);\n\n\t\tresultPoiPoints = resultPoiPoints.concat(poiPoints);\n\t\tresultPolyLines = resultPolyLines.concat(polyLines);\n\t}\n\n\tswitch (type) {\n\t\tcase AnalyzedType.POLYGONE:\n\t\t\tresultPoiPoints = pointsWithinPolygon(\n\t\t\t\tfeatureCollection(resultPoiPoints),\n\t\t\t\tanalyzedFeature as Feature<Polygon>,\n\t\t\t).features;\n\n\t\t\tresultPolyLines = resultPolyLines.filter((polyLine) => {\n\t\t\t\treturn !booleanDisjoint(polyLine, analyzedFeature);\n\t\t\t});\n\t\t\tbreak;\n\n\t\tcase AnalyzedType.LINESTRING:\n\t\t\tresultPoiPoints = resultPoiPoints.filter((poiPoint) => {\n\t\t\t\tconst trapDistance = pointToLineDistance(poiPoint, analyzedFeature as Feature<LineString>, {\n\t\t\t\t\tunits: \"meters\",\n\t\t\t\t});\n\n\t\t\t\treturn trapDistance <= maxTrapDistance!;\n\t\t\t});\n\n\t\t\tresultPolyLines = resultPolyLines.filter((polyLine) => {\n\t\t\t\treturn !booleanDisjoint(polyLine, analyzedFeature);\n\t\t\t});\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tthrow new Error(\"Invalid type in getPoiPolyPointsAsync\");\n\t}\n\n\treturn { resultPoiPoints, resultPolyLines };\n};\n\nexport default getPoiPolyPointsAsync;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAeO;AACP,wBAA2B;AAC3B,mBAAsB;AAEf,IAAK,eAAL,kBAAKA,kBAAL;AACN,EAAAA,4BAAA;AACA,EAAAA,4BAAA;AAFW,SAAAA;AAAA,GAAA;AAWZ,MAAM,wBAAwB,OAAO;AAAA,EACpC;AAAA,EACA;AAAA,EACA;AACD,MAGM;AAEL,QAAM,mBAAe,kBAAK,eAAe;AACzC,QAAM,kBAAc,yBAAY,YAAY;AAE5C,QAAM,aAAa,KAAK,SAAK,kBAAK,WAAW,CAAC,IAAI;AAClD,MAAI;AAAwC,YAAQ,IAAI,kBAAkB,UAAU;AAEpF,QAAM,wBAAoB,8BAAW,UAAU;AAC/C,MAAI;AAAwC,YAAQ,IAAI,yBAAyB,iBAAiB;AAElG,QAAM,YAAY,aAAa;AAE/B,MAAI;AAEJ,UAAQ,MAAM;AAAA,IACb,KAAK;AACJ,yBAAe,sBAAK,oBAAO,iBAAiB,WAAW,EAAE,OAAO,aAAa,CAAC,CAAC;AAC/E;AAAA,IACD,KAAK;AACJ,yBAAe,sBAAK,oBAAO,aAAa,WAAW,EAAE,OAAO,aAAa,CAAC,CAAC;AAC3E;AAAA,IACD;AACC,YAAM,IAAI,MAAM,uCAAuC;AAAA,EACzD;AAEA,QAAM,oBAAgB,wBAAW,cAAc,SAAS;AACxD,MAAI;AAAwC,YAAQ,IAAI,qBAAqB,cAAc,SAAS,MAAM;AAE1G,QAAM,uBAAuB,cAAc,SAAS,OAAO,CAAC,YAAY,KAAC,6BAAgB,SAAS,eAAe,CAAC;AAClH,MAAI;AAAwC,YAAQ,IAAI,4BAA4B,qBAAqB,MAAM;AAE/G,MAAI,kBAAmD,CAAC;AACxD,MAAI,kBAAyD,CAAC;AAE9D,aAAW,WAAW,sBAAsB;AAC3C,UAAM,cAAU,kBAAK,OAAO;AAE5B,UAAM,EAAE,WAAW,UAAU,IAAI,UAAM;AAAA,MACtC;AAAA,QACC,KAAK,QAAQ,CAAC;AAAA,QACd,KAAK,QAAQ,CAAC;AAAA,MACf;AAAA,MACA;AAAA,QACC,KAAK,QAAQ,CAAC;AAAA,QACd,KAAK,QAAQ,CAAC;AAAA,MACf;AAAA,IACD;AAEA,sBAAkB,gBAAgB,OAAO,SAAS;AAClD,sBAAkB,gBAAgB,OAAO,SAAS;AAAA,EACnD;AAEA,UAAQ,MAAM;AAAA,IACb,KAAK;AACJ,4BAAkB;AAAA,YACjB,+BAAkB,eAAe;AAAA,QACjC;AAAA,MACD,EAAE;AAEF,wBAAkB,gBAAgB,OAAO,CAAC,aAAa;AACtD,eAAO,KAAC,6BAAgB,UAAU,eAAe;AAAA,MAClD,CAAC;AACD;AAAA,IAED,KAAK;AACJ,wBAAkB,gBAAgB,OAAO,CAAC,aAAa;AACtD,cAAM,mBAAe,iCAAoB,UAAU,iBAAwC;AAAA,UAC1F,OAAO;AAAA,QACR,CAAC;AAED,eAAO,gBAAgB;AAAA,MACxB,CAAC;AAED,wBAAkB,gBAAgB,OAAO,CAAC,aAAa;AACtD,eAAO,KAAC,6BAAgB,UAAU,eAAe;AAAA,MAClD,CAAC;AACD;AAAA,IAED;AACC,YAAM,IAAI,MAAM,uCAAuC;AAAA,EACzD;AAEA,SAAO,EAAE,iBAAiB,gBAAgB;AAC3C;AAEA,IAAO,gCAAQ;",
  "names": ["AnalyzedType"]
}
