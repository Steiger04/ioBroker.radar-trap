{
  "version": 3,
  "sources": ["../../src/lib/getPoiPolyPointsAsync.ts"],
  "sourcesContent": ["import {\n\tBBox,\n\tFeature,\n\tLineString,\n\tPoint,\n\tPolygon,\n\tarea,\n\tbbox,\n\tbboxPolygon,\n\tbooleanDisjoint,\n\tbuffer,\n\tsquareGrid,\n} from \"@turf/turf\";\nimport { getDevisor } from \"./getDevisor\";\nimport { traps2 } from \"./atudo/traps2\";\n\nexport enum AnalyzedType {\n\tPOLYGONE,\n\tLINESTRING,\n}\n\ntype AnalyzedFeature = Feature<Polygon> | Feature<LineString>;\n\nconst getPoiPolyPointsAsync = async (analyzedFeature: AnalyzedFeature, type: AnalyzedType) => {\n\t// const areaPolygon = Object.values(data!.areaPolygons!)[0];\n\tconst analyzedBbox = bbox(analyzedFeature);\n\tconst analyzedBox = bboxPolygon(analyzedBbox);\n\n\tconst sideLength = Math.sqrt(area(analyzedBox)) / 1_000;\n\tconsole.log(\"sideLength >>>\", sideLength);\n\n\tconst sideLengthDivisor = getDevisor(sideLength);\n\tconsole.log(\"sideLengthDivisor >>>\", sideLengthDivisor);\n\n\tconst cellWidth = sideLength / sideLengthDivisor;\n\n\tlet bufferedBbox: BBox;\n\n\tswitch (type) {\n\t\tcase AnalyzedType.POLYGONE:\n\t\t\tbufferedBbox = bbox(buffer(analyzedFeature, cellWidth, { units: \"kilometers\" }));\n\t\t\tbreak;\n\t\tcase AnalyzedType.LINESTRING:\n\t\t\tbufferedBbox = bbox(buffer(analyzedBox, cellWidth, { units: \"kilometers\" }));\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new Error(\"Invalid type in getPoiPolyPointsAsync\");\n\t}\n\n\tconst squareBoxGrid = squareGrid(bufferedBbox, cellWidth);\n\tconsole.log(\"squareBoxGrid >>>\", squareBoxGrid.features.length);\n\n\tconst squareBoxGridReduced = squareBoxGrid.features.filter((feature) => !booleanDisjoint(feature, analyzedFeature));\n\tconsole.log(\"squareBoxGridReduced >>>\", squareBoxGridReduced.length);\n\n\tlet resultPoiPoints: Feature<Point, radarTrap.Poi>[] = [];\n\tlet resultPolyPoints: Feature<Point, radarTrap.Poly>[] = [];\n\n\tfor (const feature of squareBoxGridReduced) {\n\t\tconst tmpBbox = bbox(feature);\n\n\t\tconst { polyPoints, poiPoints } = await traps2(\n\t\t\t{\n\t\t\t\tlng: tmpBbox[0],\n\t\t\t\tlat: tmpBbox[1],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlng: tmpBbox[2],\n\t\t\t\tlat: tmpBbox[3],\n\t\t\t},\n\t\t);\n\t\tconsole.log(\"poiPoints >>>\", poiPoints.length);\n\n\t\tif (poiPoints.length > 499) console.log(\"gridTraps >>>\", poiPoints.length);\n\n\t\tresultPolyPoints = resultPolyPoints.concat(polyPoints);\n\t\tresultPoiPoints = resultPoiPoints.concat(poiPoints);\n\t}\n\n\treturn { resultPoiPoints, resultPolyPoints };\n};\n\nexport default getPoiPolyPointsAsync;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAYO;AACP,wBAA2B;AAC3B,oBAAuB;AAEhB,IAAK,eAAL,kBAAKA,kBAAL;AACN,EAAAA,4BAAA;AACA,EAAAA,4BAAA;AAFW,SAAAA;AAAA,GAAA;AAOZ,MAAM,wBAAwB,OAAO,iBAAkC,SAAuB;AAE7F,QAAM,mBAAe,kBAAK,eAAe;AACzC,QAAM,kBAAc,yBAAY,YAAY;AAE5C,QAAM,aAAa,KAAK,SAAK,kBAAK,WAAW,CAAC,IAAI;AAClD,UAAQ,IAAI,kBAAkB,UAAU;AAExC,QAAM,wBAAoB,8BAAW,UAAU;AAC/C,UAAQ,IAAI,yBAAyB,iBAAiB;AAEtD,QAAM,YAAY,aAAa;AAE/B,MAAI;AAEJ,UAAQ,MAAM;AAAA,IACb,KAAK;AACJ,yBAAe,sBAAK,oBAAO,iBAAiB,WAAW,EAAE,OAAO,aAAa,CAAC,CAAC;AAC/E;AAAA,IACD,KAAK;AACJ,yBAAe,sBAAK,oBAAO,aAAa,WAAW,EAAE,OAAO,aAAa,CAAC,CAAC;AAC3E;AAAA,IACD;AACC,YAAM,IAAI,MAAM,uCAAuC;AAAA,EACzD;AAEA,QAAM,oBAAgB,wBAAW,cAAc,SAAS;AACxD,UAAQ,IAAI,qBAAqB,cAAc,SAAS,MAAM;AAE9D,QAAM,uBAAuB,cAAc,SAAS,OAAO,CAAC,YAAY,KAAC,6BAAgB,SAAS,eAAe,CAAC;AAClH,UAAQ,IAAI,4BAA4B,qBAAqB,MAAM;AAEnE,MAAI,kBAAmD,CAAC;AACxD,MAAI,mBAAqD,CAAC;AAE1D,aAAW,WAAW,sBAAsB;AAC3C,UAAM,cAAU,kBAAK,OAAO;AAE5B,UAAM,EAAE,YAAY,UAAU,IAAI,UAAM;AAAA,MACvC;AAAA,QACC,KAAK,QAAQ,CAAC;AAAA,QACd,KAAK,QAAQ,CAAC;AAAA,MACf;AAAA,MACA;AAAA,QACC,KAAK,QAAQ,CAAC;AAAA,QACd,KAAK,QAAQ,CAAC;AAAA,MACf;AAAA,IACD;AACA,YAAQ,IAAI,iBAAiB,UAAU,MAAM;AAE7C,QAAI,UAAU,SAAS;AAAK,cAAQ,IAAI,iBAAiB,UAAU,MAAM;AAEzE,uBAAmB,iBAAiB,OAAO,UAAU;AACrD,sBAAkB,gBAAgB,OAAO,SAAS;AAAA,EACnD;AAEA,SAAO,EAAE,iBAAiB,iBAAiB;AAC5C;AAEA,IAAO,gCAAQ;",
  "names": ["AnalyzedType"]
}
