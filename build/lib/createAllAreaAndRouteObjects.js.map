{
  "version": 3,
  "sources": ["../../src/lib/createAllAreaAndRouteObjects.ts"],
  "sourcesContent": ["import type * as utils from \"@iobroker/adapter-core\";\nimport type { Application } from \"../server/declarations\";\nimport { createAreaObjects } from \"./createAreaObjects\";\nimport { createRouteObjects } from \"./createRouteObjects\";\n\nconst createAllAreaAndRouteObjects = async (that: utils.AdapterInstance, feathers: Application): Promise<void> => {\n\t// console.log(\"createAllAreaAndRouteObjects\");\n\n\tconst routes = await feathers.service(\"routes\").find({\n\t\tquery: {\n\t\t\t$limit: -1,\n\t\t\t$select: [\"_id\", \"timestamp\", \"description\", \"activeProfile\", \"directions\"],\n\t\t},\n\t});\n\n\tconst areas = await feathers.service(\"areas\").find({\n\t\tquery: {\n\t\t\t$limit: -1,\n\t\t\t$select: [\"_id\", \"timestamp\", \"description\", \"areaTraps\", \"areaTrapsNew\", \"areaTrapsRejected\"],\n\t\t},\n\t});\n\n\tconsole.log(\"createAllAreaAndRouteObjects: areas\", areas);\n\n\tfor (const routeData of routes as radarTrap.Routes) {\n\t\tawait createRouteObjects(that, routeData);\n\t}\n\n\tfor (const areaData of areas as radarTrap.Areas) {\n\t\tawait createAreaObjects(that, areaData);\n\t}\n};\n\nexport { createAllAreaAndRouteObjects };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,+BAAkC;AAClC,gCAAmC;AAEnC,MAAM,+BAA+B,OAAO,MAA6B,aAAyC;AAGjH,QAAM,SAAS,MAAM,SAAS,QAAQ,QAAQ,EAAE,KAAK;AAAA,IACpD,OAAO;AAAA,MACN,QAAQ;AAAA,MACR,SAAS,CAAC,OAAO,aAAa,eAAe,iBAAiB,YAAY;AAAA,IAC3E;AAAA,EACD,CAAC;AAED,QAAM,QAAQ,MAAM,SAAS,QAAQ,OAAO,EAAE,KAAK;AAAA,IAClD,OAAO;AAAA,MACN,QAAQ;AAAA,MACR,SAAS,CAAC,OAAO,aAAa,eAAe,aAAa,gBAAgB,mBAAmB;AAAA,IAC9F;AAAA,EACD,CAAC;AAED,UAAQ,IAAI,uCAAuC,KAAK;AAExD,aAAW,aAAa,QAA4B;AACnD,cAAM,8CAAmB,MAAM,SAAS;AAAA,EACzC;AAEA,aAAW,YAAY,OAA0B;AAChD,cAAM,4CAAkB,MAAM,QAAQ;AAAA,EACvC;AACD;",
  "names": []
}
