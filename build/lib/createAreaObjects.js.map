{
  "version": 3,
  "sources": ["../../src/lib/createAreaObjects.ts"],
  "sourcesContent": ["import { createCronJobAsync } from \"./createCronJob\";\n\nimport type * as utils from \"@iobroker/adapter-core\";\n\nconst createAreaObjects = async (that: utils.AdapterInstance, area: radarTrap.Area): Promise<void> => {\n\tawait that.setObjectAsync(area._id, {\n\t\ttype: \"device\",\n\t\tcommon: { name: area.description! },\n\t\tnative: { type: \"AREA\" },\n\t});\n\n\tawait createCronJobAsync(that, area._id);\n\n\tawait that.createChannelAsync(`${area._id}`, \"area-infos\", {\n\t\tname: \"Area Infos\",\n\t});\n\n\tawait that\n\t\t.createStateAsync(`${area._id}`, \"area-infos\", \"description\", {\n\t\t\tname: \"Description\",\n\t\t\tdefAck: true,\n\t\t\tread: true,\n\t\t\twrite: false,\n\t\t\ttype: \"string\",\n\t\t\trole: \"text\",\n\t\t})\n\t\t.then(() => that.setStateAsync(`${area._id}.area-infos.description`, `${area.description}`, true));\n\n\tawait that.createChannelAsync(`${area._id}`, \"area\", {\n\t\tname: \"Area\",\n\t});\n\n\tlet totalTrapsCount = 0;\n\tfor (const [trapName, traps] of Object.entries(area.areaTraps!)) {\n\t\tconst newTraps = traps.map((trap) => ({\n\t\t\ttype: trap.type,\n\t\t\tgeometry: trap.geometry,\n\t\t\tproperties: { ...trap.properties?.trapInfo },\n\t\t}));\n\n\t\ttotalTrapsCount += newTraps.length;\n\n\t\tawait that\n\t\t\t.createStateAsync(`${area._id}`, `area`, `${trapName}`, {\n\t\t\t\tname: `${trapName}`,\n\t\t\t\tdefAck: true,\n\t\t\t\tread: true,\n\t\t\t\twrite: false,\n\t\t\t\ttype: \"array\",\n\t\t\t\trole: \"list\",\n\t\t\t})\n\t\t\t.then(() => that.setStateAsync(`${area._id}.area.${trapName}`, JSON.stringify(newTraps), true));\n\n\t\tawait that\n\t\t\t.createStateAsync(`${area._id}`, `area`, `${trapName}Count`, {\n\t\t\t\tname: `${trapName} Count`,\n\t\t\t\tdefAck: true,\n\t\t\t\tread: true,\n\t\t\t\twrite: false,\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"value\",\n\t\t\t})\n\t\t\t.then(() => that.setStateAsync(`${area._id}.area.${trapName}Count`, newTraps.length, true));\n\t}\n\n\tawait that\n\t\t.createStateAsync(`${area._id}`, \"area-infos\", \"totalTrapsCount\", {\n\t\t\tname: \"totalTraps Count\",\n\t\t\tdefAck: true,\n\t\t\tread: true,\n\t\t\twrite: false,\n\t\t\ttype: \"number\",\n\t\t\trole: \"value\",\n\t\t})\n\t\t.then(() => that.setStateAsync(`${area._id}.area-infos.totalTrapsCount`, totalTrapsCount, true));\n};\n\nexport { createAreaObjects };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAmC;AAInC,MAAM,oBAAoB,OAAO,MAA6B,SAAwC;AACrG,QAAM,KAAK,eAAe,KAAK,KAAK;AAAA,IACnC,MAAM;AAAA,IACN,QAAQ,EAAE,MAAM,KAAK,YAAa;AAAA,IAClC,QAAQ,EAAE,MAAM,OAAO;AAAA,EACxB,CAAC;AAED,YAAM,yCAAmB,MAAM,KAAK,GAAG;AAEvC,QAAM,KAAK,mBAAmB,GAAG,KAAK,OAAO,cAAc;AAAA,IAC1D,MAAM;AAAA,EACP,CAAC;AAED,QAAM,KACJ,iBAAiB,GAAG,KAAK,OAAO,cAAc,eAAe;AAAA,IAC7D,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,OAAO;AAAA,IACP,MAAM;AAAA,IACN,MAAM;AAAA,EACP,CAAC,EACA,KAAK,MAAM,KAAK,cAAc,GAAG,KAAK,8BAA8B,GAAG,KAAK,eAAe,IAAI,CAAC;AAElG,QAAM,KAAK,mBAAmB,GAAG,KAAK,OAAO,QAAQ;AAAA,IACpD,MAAM;AAAA,EACP,CAAC;AAED,MAAI,kBAAkB;AACtB,aAAW,CAAC,UAAU,KAAK,KAAK,OAAO,QAAQ,KAAK,SAAU,GAAG;AAChE,UAAM,WAAW,MAAM,IAAI,CAAC,SAAM;AAlCpC;AAkCwC;AAAA,QACrC,MAAM,KAAK;AAAA,QACX,UAAU,KAAK;AAAA,QACf,YAAY,EAAE,IAAG,UAAK,eAAL,mBAAiB,SAAS;AAAA,MAC5C;AAAA,KAAE;AAEF,uBAAmB,SAAS;AAE5B,UAAM,KACJ,iBAAiB,GAAG,KAAK,OAAO,QAAQ,GAAG,YAAY;AAAA,MACvD,MAAM,GAAG;AAAA,MACT,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,OAAO;AAAA,MACP,MAAM;AAAA,MACN,MAAM;AAAA,IACP,CAAC,EACA,KAAK,MAAM,KAAK,cAAc,GAAG,KAAK,YAAY,YAAY,KAAK,UAAU,QAAQ,GAAG,IAAI,CAAC;AAE/F,UAAM,KACJ,iBAAiB,GAAG,KAAK,OAAO,QAAQ,GAAG,iBAAiB;AAAA,MAC5D,MAAM,GAAG;AAAA,MACT,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,OAAO;AAAA,MACP,MAAM;AAAA,MACN,MAAM;AAAA,IACP,CAAC,EACA,KAAK,MAAM,KAAK,cAAc,GAAG,KAAK,YAAY,iBAAiB,SAAS,QAAQ,IAAI,CAAC;AAAA,EAC5F;AAEA,QAAM,KACJ,iBAAiB,GAAG,KAAK,OAAO,cAAc,mBAAmB;AAAA,IACjE,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,OAAO;AAAA,IACP,MAAM;AAAA,IACN,MAAM;AAAA,EACP,CAAC,EACA,KAAK,MAAM,KAAK,cAAc,GAAG,KAAK,kCAAkC,iBAAiB,IAAI,CAAC;AACjG;",
  "names": []
}
