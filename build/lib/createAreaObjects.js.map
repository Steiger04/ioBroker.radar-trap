{
  "version": 3,
  "sources": ["../../src/lib/createAreaObjects.ts"],
  "sourcesContent": ["import { createCronJobAsync } from \"./createCronJob\";\n\nimport type * as utils from \"@iobroker/adapter-core\";\n\nconst createAreaObjects = async (\n\tthat: utils.AdapterInstance,\n\tarea: radarTrap.Area,\n): Promise<void> => {\n\tawait that.setObjectAsync(area._id, {\n\t\ttype: \"device\",\n\t\tcommon: { name: area.description! },\n\t\tnative: { type: \"AREA\" },\n\t});\n\n\tawait createCronJobAsync(that, area._id);\n\n\tawait that.createChannelAsync(`${area._id}`, \"area-infos\", {\n\t\tname: \"Area Infos\",\n\t});\n\n\tawait that\n\t\t.createStateAsync(`${area._id}`, \"area-infos\", \"description\", {\n\t\t\tname: \"Description\",\n\t\t\tdefAck: true,\n\t\t\tread: true,\n\t\t\twrite: false,\n\t\t\ttype: \"string\",\n\t\t\trole: \"text\",\n\t\t})\n\t\t.then(() =>\n\t\t\tthat.setStateAsync(\n\t\t\t\t`${area._id}.area-infos.description`,\n\t\t\t\t`${area.description}`,\n\t\t\t\ttrue,\n\t\t\t),\n\t\t);\n\n\tawait that.createChannelAsync(`${area._id}`, \"area\", {\n\t\tname: \"Area\",\n\t});\n\n\tlet totalTrapsCount = 0;\n\tfor (const [trapName, traps] of Object.entries(area.areaTraps!)) {\n\t\tconst newTraps = traps.map((trap) => ({\n\t\t\ttype: trap.type,\n\t\t\tgeometry: trap.geometry,\n\t\t\tproperties: { ...trap.properties?.trapInfo },\n\t\t}));\n\n\t\ttotalTrapsCount += newTraps.length;\n\n\t\tawait that\n\t\t\t.createStateAsync(`${area._id}`, `area`, `${trapName}`, {\n\t\t\t\tname: `${trapName}`,\n\t\t\t\tdefAck: true,\n\t\t\t\tread: true,\n\t\t\t\twrite: false,\n\t\t\t\ttype: \"array\",\n\t\t\t\trole: \"list\",\n\t\t\t})\n\t\t\t.then(() =>\n\t\t\t\tthat.setStateAsync(\n\t\t\t\t\t`${area._id}.area.${trapName}`,\n\t\t\t\t\tJSON.stringify(newTraps),\n\t\t\t\t\ttrue,\n\t\t\t\t),\n\t\t\t);\n\n\t\tawait that\n\t\t\t.createStateAsync(`${area._id}`, `area`, `${trapName}Count`, {\n\t\t\t\tname: `${trapName} Count`,\n\t\t\t\tdefAck: true,\n\t\t\t\tread: true,\n\t\t\t\twrite: false,\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"value\",\n\t\t\t})\n\t\t\t.then(() =>\n\t\t\t\tthat.setStateAsync(\n\t\t\t\t\t`${area._id}.area.${trapName}Count`,\n\t\t\t\t\tnewTraps.length,\n\t\t\t\t\ttrue,\n\t\t\t\t),\n\t\t\t);\n\t}\n\n\tawait that\n\t\t.createStateAsync(`${area._id}`, \"area-infos\", \"totalTrapsCount\", {\n\t\t\tname: \"totalTraps Count\",\n\t\t\tdefAck: true,\n\t\t\tread: true,\n\t\t\twrite: false,\n\t\t\ttype: \"number\",\n\t\t\trole: \"value\",\n\t\t})\n\t\t.then(() =>\n\t\t\tthat.setStateAsync(\n\t\t\t\t`${area._id}.area-infos.totalTrapsCount`,\n\t\t\t\ttotalTrapsCount,\n\t\t\t\ttrue,\n\t\t\t),\n\t\t);\n};\n\nexport { createAreaObjects };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAmC;AAInC,MAAM,oBAAoB,OACzB,MACA,SACmB;AACnB,QAAM,KAAK,eAAe,KAAK,KAAK;AAAA,IACnC,MAAM;AAAA,IACN,QAAQ,EAAE,MAAM,KAAK,YAAa;AAAA,IAClC,QAAQ,EAAE,MAAM,OAAO;AAAA,EACxB,CAAC;AAED,YAAM,yCAAmB,MAAM,KAAK,GAAG;AAEvC,QAAM,KAAK,mBAAmB,GAAG,KAAK,OAAO,cAAc;AAAA,IAC1D,MAAM;AAAA,EACP,CAAC;AAED,QAAM,KACJ,iBAAiB,GAAG,KAAK,OAAO,cAAc,eAAe;AAAA,IAC7D,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,OAAO;AAAA,IACP,MAAM;AAAA,IACN,MAAM;AAAA,EACP,CAAC,EACA;AAAA,IAAK,MACL,KAAK;AAAA,MACJ,GAAG,KAAK;AAAA,MACR,GAAG,KAAK;AAAA,MACR;AAAA,IACD;AAAA,EACD;AAED,QAAM,KAAK,mBAAmB,GAAG,KAAK,OAAO,QAAQ;AAAA,IACpD,MAAM;AAAA,EACP,CAAC;AAED,MAAI,kBAAkB;AACtB,aAAW,CAAC,UAAU,KAAK,KAAK,OAAO,QAAQ,KAAK,SAAU,GAAG;AAChE,UAAM,WAAW,MAAM,IAAI,CAAC,SAAM;AA3CpC;AA2CwC;AAAA,QACrC,MAAM,KAAK;AAAA,QACX,UAAU,KAAK;AAAA,QACf,YAAY,EAAE,IAAG,UAAK,eAAL,mBAAiB,SAAS;AAAA,MAC5C;AAAA,KAAE;AAEF,uBAAmB,SAAS;AAE5B,UAAM,KACJ,iBAAiB,GAAG,KAAK,OAAO,QAAQ,GAAG,YAAY;AAAA,MACvD,MAAM,GAAG;AAAA,MACT,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,OAAO;AAAA,MACP,MAAM;AAAA,MACN,MAAM;AAAA,IACP,CAAC,EACA;AAAA,MAAK,MACL,KAAK;AAAA,QACJ,GAAG,KAAK,YAAY;AAAA,QACpB,KAAK,UAAU,QAAQ;AAAA,QACvB;AAAA,MACD;AAAA,IACD;AAED,UAAM,KACJ,iBAAiB,GAAG,KAAK,OAAO,QAAQ,GAAG,iBAAiB;AAAA,MAC5D,MAAM,GAAG;AAAA,MACT,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,OAAO;AAAA,MACP,MAAM;AAAA,MACN,MAAM;AAAA,IACP,CAAC,EACA;AAAA,MAAK,MACL,KAAK;AAAA,QACJ,GAAG,KAAK,YAAY;AAAA,QACpB,SAAS;AAAA,QACT;AAAA,MACD;AAAA,IACD;AAAA,EACF;AAEA,QAAM,KACJ,iBAAiB,GAAG,KAAK,OAAO,cAAc,mBAAmB;AAAA,IACjE,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,OAAO;AAAA,IACP,MAAM;AAAA,IACN,MAAM;AAAA,EACP,CAAC,EACA;AAAA,IAAK,MACL,KAAK;AAAA,MACJ,GAAG,KAAK;AAAA,MACR;AAAA,MACA;AAAA,IACD;AAAA,EACD;AACF;",
  "names": []
}
