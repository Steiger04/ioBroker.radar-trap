{
  "version": 3,
  "sources": ["../../src/lib/Scheduler.ts"],
  "sourcesContent": ["import { Cron } from \"croner\";\nimport { feathers } from \"../server/createFeathers\";\n\nimport type * as utils from \"@iobroker/adapter-core\";\n\ntype DataType = \"ROUTE\" | \"AREA\";\n\nclass Scheduler<T extends radarTrap.Route | radarTrap.Area> {\n\tprivate _status: radarTrap.GenericStatus;\n\tprivate readonly dataType: DataType;\n\tprivate readonly data: Partial<T>;\n\tprivate readonly cronJob: Cron;\n\tprivate interval: NodeJS.Timeout | null;\n\n\tstatic #scheduleMap = new Map<string, Scheduler<radarTrap.Route | radarTrap.Area>>();\n\tstatic #areasService = feathers.service(\"areas\");\n\tstatic #routesService = feathers.service(\"routes\");\n\tstatic #adapter: utils.AdapterInstance;\n\n\tconstructor(data: Partial<T>, type: DataType) {\n\t\tconst { _id: id, cron: pattern } = data;\n\n\t\tthis._status = \"idle\";\n\n\t\tthis.dataType = type;\n\t\tthis.data = data;\n\n\t\tthis.cronJob = new Cron(pattern!.trim(), () => {\n\t\t\tif (process.env.NODE_ENV === \"development\")\n\t\t\t\tconsole.log(`Cron-Job with id ${id} and pattern ${pattern!.trim()} scheduled`);\n\t\t\tScheduler.run(id!);\n\t\t});\n\n\t\tthis.interval = setInterval(() => {\n\t\t\tScheduler.#adapter.setStateAsync(`${id}.cron-job.timer`, this.next, true).catch((ex) => console.log(ex));\n\t\t}, 1_000);\n\n\t\tif (process.env.NODE_ENV === \"development\")\n\t\t\tconsole.log(`Cron-Job with id ${id} and pattern ${pattern!.trim()} created.`);\n\t}\n\n\tget next(): number | null {\n\t\tconst next = this.cronJob.msToNext();\n\n\t\tif (next !== null) {\n\t\t\treturn Math.floor(next / 1_000);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tget cronJobIsRunning(): boolean {\n\t\treturn this.cronJob.isRunning();\n\t}\n\n\tget status(): radarTrap.GenericStatus {\n\t\treturn this._status;\n\t}\n\n\tprivate set status(status: radarTrap.GenericStatus) {\n\t\tthis._status = status;\n\t}\n\n\tstatic setStatus(statusWithId: radarTrap.GenericStatusWithId): void {\n\t\tconst { _id, status } = statusWithId;\n\t\tconst _schedule = Scheduler.getSchedule(_id!);\n\n\t\tif (Boolean(!_id) || Boolean(!_schedule)) {\n\t\t\treturn;\n\t\t}\n\n\t\t_schedule!.status = status;\n\t}\n\n\tstatic addThat(adapter: utils.AdapterInstance): void {\n\t\tScheduler.#adapter = adapter;\n\t}\n\n\tstatic getSchedule(id: string): Scheduler<radarTrap.Route | radarTrap.Area> | undefined {\n\t\treturn Scheduler.#scheduleMap.get(id);\n\t}\n\n\tstatic schedule(data: Partial<radarTrap.Route | radarTrap.Area>, type: DataType): void {\n\t\tconst { _id: id } = data;\n\n\t\tScheduler.delete(id!);\n\n\t\tScheduler.#scheduleMap.set(id!, new this(data, type));\n\n\t\tconsole.log(\"process.env.NODE_ENV\", process.env.NODE_ENV);\n\n\t\tif (process.env.NODE_ENV === \"development\") console.log(`Scheduled with id: ${id}`);\n\t}\n\n\tstatic async scheduleAll(): Promise<void> {\n\t\tconst routes = await Scheduler.#routesService.find({\n\t\t\tquery: {\n\t\t\t\t$limit: -1,\n\t\t\t\t$select: [\"_id\", \"src\", \"dst\", \"activeProfile\", \"maxTrapDistance\", \"cron\"],\n\t\t\t},\n\t\t});\n\n\t\tconst areas = await Scheduler.#areasService.find({\n\t\t\tquery: {\n\t\t\t\t$limit: -1,\n\t\t\t\t$select: [\"_id\", \"cron\", \"areaPolygons\"],\n\t\t\t},\n\t\t});\n\n\t\tfor (const routeData of routes as radarTrap.Routes) {\n\t\t\tScheduler.schedule(routeData, \"ROUTE\");\n\t\t}\n\n\t\tfor (const areaData of areas as radarTrap.Areas) {\n\t\t\tScheduler.schedule(areaData, \"AREA\");\n\t\t}\n\t}\n\n\tstatic delete(id: string): void {\n\t\tif (!Scheduler.#scheduleMap.has(id)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst _schedule = Scheduler.#scheduleMap.get(id)!;\n\n\t\tif (_schedule.interval !== null) {\n\t\t\tclearInterval(_schedule.interval);\n\t\t}\n\n\t\t_schedule.cronJob.stop();\n\t\tScheduler.#scheduleMap.delete(id);\n\t}\n\n\tstatic deleteAll(): void {\n\t\tfor (const _schedule of Scheduler.#scheduleMap.values()) {\n\t\t\tif (_schedule.interval !== null) {\n\t\t\t\tclearInterval(_schedule.interval);\n\t\t\t}\n\n\t\t\t_schedule.cronJob.stop();\n\t\t}\n\n\t\tScheduler.#scheduleMap.clear();\n\t}\n\n\tstatic async run(id: string): Promise<void> {\n\t\tconst _schedule = Scheduler.#scheduleMap.get(id)!;\n\n\t\tif (_schedule.status === \"loading\") {\n\t\t\treturn;\n\t\t}\n\n\t\tScheduler.pause(id);\n\n\t\ttry {\n\t\t\tif (_schedule.dataType === \"AREA\") {\n\t\t\t\tawait Scheduler.#areasService.create(_schedule.data, {\n\t\t\t\t\tpatchSourceFromServer: true,\n\t\t\t\t});\n\t\t\t} else if (_schedule.dataType === \"ROUTE\") {\n\t\t\t\tawait Scheduler.#routesService.create(_schedule.data, {\n\t\t\t\t\tpatchSourceFromServer: true,\n\t\t\t\t});\n\t\t\t}\n\t\t} catch (ex) {\n\t\t\tconsole.log(ex);\n\t\t}\n\n\t\tScheduler.resume(id);\n\t}\n\n\tstatic pause(id: string): void {\n\t\tif (!Scheduler.#scheduleMap.has(id)) return;\n\n\t\tconst _schedule = Scheduler.#scheduleMap.get(id)!;\n\n\t\tif (!_schedule.cronJob.isRunning() || _schedule.interval === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tclearInterval(_schedule.interval);\n\t\t_schedule.interval = null;\n\t\t_schedule.cronJob.pause();\n\n\t\tScheduler.#adapter.setStateAsync(`${id}.cron-job.timer`, 0, true).catch((ex) => console.log(ex));\n\t}\n\n\tstatic resume(id: string): void {\n\t\tif (!Scheduler.#scheduleMap.has(id)) return;\n\n\t\tconst _schedule = Scheduler.#scheduleMap.get(id)!;\n\n\t\tif (_schedule.cronJob.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (_schedule.interval === null) {\n\t\t\t_schedule.cronJob.resume();\n\n\t\t\t_schedule.interval = setInterval(() => {\n\t\t\t\tScheduler.#adapter\n\t\t\t\t\t.setStateAsync(`${id}.cron-job.timer`, _schedule.next, true)\n\t\t\t\t\t.catch((ex) => console.log(ex));\n\t\t\t}, 1_000);\n\t\t}\n\t}\n}\n\nexport { Scheduler };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAqB;AACrB,4BAAyB;AAMzB,MAAM,UAAsD;AAAA,EAO3D,OAAO,eAAe,oBAAI,IAAyD;AAAA,EACnF,OAAO,gBAAgB,+BAAS,QAAQ,OAAO;AAAA,EAC/C,OAAO,iBAAiB,+BAAS,QAAQ,QAAQ;AAAA,EACjD,OAAO;AAAA,EAEP,YAAY,MAAkB,MAAgB;AAC7C,UAAM,EAAE,KAAK,IAAI,MAAM,QAAQ,IAAI;AAEnC,SAAK,UAAU;AAEf,SAAK,WAAW;AAChB,SAAK,OAAO;AAEZ,SAAK,UAAU,IAAI,mBAAK,QAAS,KAAK,GAAG,MAAM;AAC9C,UAAI;AACH,gBAAQ,IAAI,oBAAoB,EAAE,gBAAgB,QAAS,KAAK,CAAC,YAAY;AAC9E,gBAAU,IAAI,EAAG;AAAA,IAClB,CAAC;AAED,SAAK,WAAW,YAAY,MAAM;AACjC,gBAAU,SAAS,cAAc,GAAG,EAAE,mBAAmB,KAAK,MAAM,IAAI,EAAE,MAAM,CAAC,OAAO,QAAQ,IAAI,EAAE,CAAC;AAAA,IACxG,GAAG,GAAK;AAER,QAAI;AACH,cAAQ,IAAI,oBAAoB,EAAE,gBAAgB,QAAS,KAAK,CAAC,WAAW;AAAA,EAC9E;AAAA,EAEA,IAAI,OAAsB;AACzB,UAAM,OAAO,KAAK,QAAQ,SAAS;AAEnC,QAAI,SAAS,MAAM;AAClB,aAAO,KAAK,MAAM,OAAO,GAAK;AAAA,IAC/B;AAEA,WAAO;AAAA,EACR;AAAA,EAEA,IAAI,mBAA4B;AAC/B,WAAO,KAAK,QAAQ,UAAU;AAAA,EAC/B;AAAA,EAEA,IAAI,SAAkC;AACrC,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,IAAY,OAAO,QAAiC;AACnD,SAAK,UAAU;AAAA,EAChB;AAAA,EAEA,OAAO,UAAU,cAAmD;AACnE,UAAM,EAAE,KAAK,OAAO,IAAI;AACxB,UAAM,YAAY,UAAU,YAAY,GAAI;AAE5C,QAAI,QAAQ,CAAC,GAAG,KAAK,QAAQ,CAAC,SAAS,GAAG;AACzC;AAAA,IACD;AAEA,cAAW,SAAS;AAAA,EACrB;AAAA,EAEA,OAAO,QAAQ,SAAsC;AACpD,cAAU,WAAW;AAAA,EACtB;AAAA,EAEA,OAAO,YAAY,IAAqE;AACvF,WAAO,UAAU,aAAa,IAAI,EAAE;AAAA,EACrC;AAAA,EAEA,OAAO,SAAS,MAAiD,MAAsB;AACtF,UAAM,EAAE,KAAK,GAAG,IAAI;AAEpB,cAAU,OAAO,EAAG;AAEpB,cAAU,aAAa,IAAI,IAAK,IAAI,KAAK,MAAM,IAAI,CAAC;AAEpD,YAAQ,IAAI,wBAAwB,YAAoB;AAExD,QAAI;AAAwC,cAAQ,IAAI,sBAAsB,EAAE,EAAE;AAAA,EACnF;AAAA,EAEA,aAAa,cAA6B;AACzC,UAAM,SAAS,MAAM,UAAU,eAAe,KAAK;AAAA,MAClD,OAAO;AAAA,QACN,QAAQ;AAAA,QACR,SAAS,CAAC,OAAO,OAAO,OAAO,iBAAiB,mBAAmB,MAAM;AAAA,MAC1E;AAAA,IACD,CAAC;AAED,UAAM,QAAQ,MAAM,UAAU,cAAc,KAAK;AAAA,MAChD,OAAO;AAAA,QACN,QAAQ;AAAA,QACR,SAAS,CAAC,OAAO,QAAQ,cAAc;AAAA,MACxC;AAAA,IACD,CAAC;AAED,eAAW,aAAa,QAA4B;AACnD,gBAAU,SAAS,WAAW,OAAO;AAAA,IACtC;AAEA,eAAW,YAAY,OAA0B;AAChD,gBAAU,SAAS,UAAU,MAAM;AAAA,IACpC;AAAA,EACD;AAAA,EAEA,OAAO,OAAO,IAAkB;AAC/B,QAAI,CAAC,UAAU,aAAa,IAAI,EAAE,GAAG;AACpC;AAAA,IACD;AAEA,UAAM,YAAY,UAAU,aAAa,IAAI,EAAE;AAE/C,QAAI,UAAU,aAAa,MAAM;AAChC,oBAAc,UAAU,QAAQ;AAAA,IACjC;AAEA,cAAU,QAAQ,KAAK;AACvB,cAAU,aAAa,OAAO,EAAE;AAAA,EACjC;AAAA,EAEA,OAAO,YAAkB;AACxB,eAAW,aAAa,UAAU,aAAa,OAAO,GAAG;AACxD,UAAI,UAAU,aAAa,MAAM;AAChC,sBAAc,UAAU,QAAQ;AAAA,MACjC;AAEA,gBAAU,QAAQ,KAAK;AAAA,IACxB;AAEA,cAAU,aAAa,MAAM;AAAA,EAC9B;AAAA,EAEA,aAAa,IAAI,IAA2B;AAC3C,UAAM,YAAY,UAAU,aAAa,IAAI,EAAE;AAE/C,QAAI,UAAU,WAAW,WAAW;AACnC;AAAA,IACD;AAEA,cAAU,MAAM,EAAE;AAElB,QAAI;AACH,UAAI,UAAU,aAAa,QAAQ;AAClC,cAAM,UAAU,cAAc,OAAO,UAAU,MAAM;AAAA,UACpD,uBAAuB;AAAA,QACxB,CAAC;AAAA,MACF,WAAW,UAAU,aAAa,SAAS;AAC1C,cAAM,UAAU,eAAe,OAAO,UAAU,MAAM;AAAA,UACrD,uBAAuB;AAAA,QACxB,CAAC;AAAA,MACF;AAAA,IACD,SAAS,IAAI;AACZ,cAAQ,IAAI,EAAE;AAAA,IACf;AAEA,cAAU,OAAO,EAAE;AAAA,EACpB;AAAA,EAEA,OAAO,MAAM,IAAkB;AAC9B,QAAI,CAAC,UAAU,aAAa,IAAI,EAAE;AAAG;AAErC,UAAM,YAAY,UAAU,aAAa,IAAI,EAAE;AAE/C,QAAI,CAAC,UAAU,QAAQ,UAAU,KAAK,UAAU,aAAa,MAAM;AAClE;AAAA,IACD;AAEA,kBAAc,UAAU,QAAQ;AAChC,cAAU,WAAW;AACrB,cAAU,QAAQ,MAAM;AAExB,cAAU,SAAS,cAAc,GAAG,EAAE,mBAAmB,GAAG,IAAI,EAAE,MAAM,CAAC,OAAO,QAAQ,IAAI,EAAE,CAAC;AAAA,EAChG;AAAA,EAEA,OAAO,OAAO,IAAkB;AAC/B,QAAI,CAAC,UAAU,aAAa,IAAI,EAAE;AAAG;AAErC,UAAM,YAAY,UAAU,aAAa,IAAI,EAAE;AAE/C,QAAI,UAAU,QAAQ,UAAU,GAAG;AAClC;AAAA,IACD;AAEA,QAAI,UAAU,aAAa,MAAM;AAChC,gBAAU,QAAQ,OAAO;AAEzB,gBAAU,WAAW,YAAY,MAAM;AACtC,kBAAU,SACR,cAAc,GAAG,EAAE,mBAAmB,UAAU,MAAM,IAAI,EAC1D,MAAM,CAAC,OAAO,QAAQ,IAAI,EAAE,CAAC;AAAA,MAChC,GAAG,GAAK;AAAA,IACT;AAAA,EACD;AACD;",
  "names": []
}
