{
  "version": 3,
  "sources": ["../../../src/lib/atudo/traps.ts"],
  "sourcesContent": ["import { Feature, Point, point } from \"@turf/helpers\";\nimport { fetch } from \"cross-fetch\";\nimport { Value } from \"@sinclair/typebox/value\";\nimport { atudoPoisSchema } from \"../schemas/atudoPoiSchema\";\nimport { atudoPolysSchema } from \"../schemas/atudoPolySchema\";\nimport { LineString, feature } from \"@turf/turf\";\nimport polyline from \"@mapbox/polyline\";\nimport { uniqBy } from \"lodash\";\n\nasync function request<\n\tTResponse extends radarTrap.AtudoPoi | radarTrap.AtudoPoly,\n\tTArray extends TResponse[] = TResponse[],\n>(url: string, config: RequestInit = {}): Promise<Record<string, TArray>> {\n\tconst response = await fetch(url, config);\n\treturn response.json();\n}\n\nconst trapBase = \"0,1,2,3,4,5,6,20,21,22,23,24,25,29,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,ts\";\n\nconst traps = async (\n\tminPos: { lng: number; lat: number },\n\tmaxPos: { lng: number; lat: number },\n): Promise<{\n\tpoiPoints: Feature<Point, radarTrap.Poi>[];\n\tpolyLines: Feature<LineString, radarTrap.Poly>[];\n}> => {\n\ttry {\n\t\t/* // Blitzer fest\n\t\tconst { pois: poisFest } = await request<radarTrap.Poi[]>(\n\t\t\t`https://cdn2.atudo.net/api/4.0/pois.php?type=101,102,103,104,105,106,107,108,109,110,111,112,113,114,115&z=100&box=${minPos.lat},${minPos.lng},${maxPos.lat},${maxPos.lng}`,\n\t\t);\n\t\tconsole.log(\"POIS_FEST >>>\", JSON.stringify(poisFest, null, 2));\n\n\t\t// Blitzer teilstation\u00E4r\n\t\tconst { pois: poisTs } = await request<radarTrap.Poi[]>(\n\t\t\t`https://cdn2.atudo.net/api/4.0/pois.php?type=ts&z=100&box=${minPos.lat},${minPos.lng},${maxPos.lat},${maxPos.lng}`,\n\t\t);\n\t\tconsole.log(\"POIS_TS >>>\", JSON.stringify(poisTs, null, 2));\n\n\t\t// Blitzer mobil\n\t\tconst { pois: poisMobil } = await request<radarTrap.Poi[]>(\n\t\t\t`https://cdn2.atudo.net/api/4.0/pois.php?type=0,1,2,3,4,5,6&z=100&box=${minPos.lat},${minPos.lng},${maxPos.lat},${maxPos.lng}`,\n\t\t);\n\t\tconsole.log(\"POIS_MOBIL >>>\", JSON.stringify(poisMobil, null, 2));\n\n\t\t// Baustellen\n\t\tconst { pois: poisBaustelle } = await request<radarTrap.Poi[]>(\n\t\t\t`https://cdn2.atudo.net/api/4.0/pois.php?type=22,26&z=100&box=${minPos.lat},${minPos.lng},${maxPos.lat},${maxPos.lng}`,\n\t\t);\n\t\tconsole.log(\"POIS_BAUSTELLE >>>\", JSON.stringify(poisBaustelle, null, 2));\n\n\t\t// Stauenden\n\t\tconst { pois: poisStauende } = await request<radarTrap.Poi[]>(\n\t\t\t`https://cdn2.atudo.net/api/4.0/pois.php?type=20&z=100&box=${minPos.lat},${minPos.lng},${maxPos.lat},${maxPos.lng}`,\n\t\t);\n\t\tconsole.log(\"POIS_STAUENDE >>>\", JSON.stringify(poisStauende, null, 2));\n\n\t\t// Gefahrenstellen\n\t\tconst { pois: poisGefahr } = await request<radarTrap.Poi[]>(\n\t\t\t`https://cdn2.atudo.net/api/4.0/pois.php?type=21,23,24,25,29&z=100&box=${minPos.lat},${minPos.lng},${maxPos.lat},${maxPos.lng}`,\n\t\t);\n\t\tconsole.log(\"POIS_GEFAHR >>>\", JSON.stringify(poisGefahr, null, 2));\n\n\t\t// Mobile Blitzer Hotspots\n\t\tconst { pois: poisHotspot } = await request<radarTrap.Poi[]>(\n\t\t\t`https://cdn2.atudo.net/api/4.0/pois.php?type=2015&z=100&box=${minPos.lat},${minPos.lng},${maxPos.lat},${maxPos.lng}`,\n\t\t);\n\t\tconsole.log(\"POIS_HOTSPOT >>>\", JSON.stringify(poisHotspot, null, 2)); \n\n\t\t// Polizeimeldungen aktuell (48h)\n\t\tconst { pois: poisPolizei48 } = await request<radarTrap.Poi[]>(\n\t\t\t`https://cdn2.atudo.net/api/4.0/pois.php?type=vwd&z=100&box=${minPos.lat},${minPos.lng},${maxPos.lat},${maxPos.lng}`,\n\t\t);\n\t\tconsole.log(\"POIS_POLIZEI48 >>>\", JSON.stringify(poisPolizei48, null, 2));\n\n\t\t// Polizeimeldungen Archiv\n\t\tconst { pois: poisPolizeiArchiv } = await request<radarTrap.Poi[]>(\n\t\t\t`https://cdn2.atudo.net/api/4.0/pois.php?type=vwda&z=100&box=${minPos.lat},${minPos.lng},${maxPos.lat},${maxPos.lng}`,\n\t\t);\n\t\tconsole.log(\"POIS_POLIZEI_ARCHIV >>>\", JSON.stringify(poisPolizeiArchiv, null, 2)); */\n\n\t\t//----------------------------------------------\n\t\tconst { pois } = await request<radarTrap.AtudoPoi>(\n\t\t\t`https://cdn2.atudo.net/api/4.0/pois.php?type=${trapBase}&z=100&box=${minPos.lat},${minPos.lng},${maxPos.lat},${maxPos.lng}`,\n\t\t);\n\t\tValue.Default(atudoPoisSchema, pois); // add schemaType to each poi\n\t\tif (!Value.Check(atudoPoisSchema, pois))\n\t\t\tconsole.log(\"POIS SCHEMA ERRORS >>>\", [...Value.Errors(atudoPoisSchema, pois)]);\n\n\t\t// nur Hotspots (2015) und Polizeimeldungen (vwd, vwda)\n\t\tconst { pois: poisHsPn } = await request<radarTrap.AtudoPoi>(\n\t\t\t`https://cdn2.atudo.net/api/4.0/pois.php?type=2015,vwd,vwda&z=100&box=${minPos.lat},${minPos.lng},${maxPos.lat},${maxPos.lng}`,\n\t\t);\n\t\tValue.Default(atudoPoisSchema, poisHsPn); // add schemaType to each poi\n\t\tif (!Value.Check(atudoPoisSchema, poisHsPn))\n\t\t\tconsole.log(\"POISHSPN SCHEMA ERRORS >>>\", [...Value.Errors(atudoPoisSchema, poisHsPn)]);\n\n\t\tconst { polys } = await request<radarTrap.AtudoPoly>(\n\t\t\t`https://cdn2.atudo.net/api/4.0/polylines.php?type=traffic&z=100&box=${minPos.lat},${minPos.lng},${maxPos.lat},${maxPos.lng}`,\n\t\t);\n\t\tValue.Default(atudoPolysSchema, polys); // add schemaType to each poly\n\t\tif (!Value.Check(atudoPolysSchema, polys))\n\t\t\tconsole.log(\"POLYS SCHEMA ERRORS >>>\", [...Value.Errors(atudoPolysSchema, polys)]);\n\n\t\tconsole.log(\"pois >>>\", pois.length);\n\t\tif (pois.length > 499) console.log(\"POIS >>>\", pois.length);\n\n\t\tconsole.log(\"poisHsPn >>>\", poisHsPn.length);\n\t\tif (poisHsPn.length > 499) console.log(\"POISHSPN >>>\", poisHsPn.length);\n\n\t\tpois.push(...poisHsPn); // add poisHsPn to pois\n\t\tconst _poiPoints = pois.reduce((list: Feature<Point, radarTrap.Poi>[], poi) => {\n\t\t\tlist.push(point([+poi.lng, +poi.lat], { ...poi }));\n\n\t\t\treturn list;\n\t\t}, []);\n\n\t\t// delete double police news\n\t\tconst poiPoints = uniqBy(_poiPoints, (point) => point.geometry?.coordinates?.join(\",\"));\n\n\t\tconst polyLines = polys.reduce((list: Feature<LineString, radarTrap.Poly>[], poly) => {\n\t\t\tlist.push(feature(polyline.toGeoJSON(poly.polyline), { ...poly }));\n\n\t\t\treturn list;\n\t\t}, []);\n\n\t\treturn { poiPoints, polyLines };\n\t} catch (error) {\n\t\tconsole.error(\"traps: \", error);\n\t\treturn { poiPoints: [], polyLines: [] };\n\t}\n};\n\nexport { traps };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAsC;AACtC,yBAAsB;AACtB,mBAAsB;AACtB,4BAAgC;AAChC,6BAAiC;AACjC,kBAAoC;AACpC,sBAAqB;AACrB,oBAAuB;AAEvB,eAAe,QAGb,KAAa,SAAsB,CAAC,GAAoC;AACzE,QAAM,WAAW,UAAM,0BAAM,KAAK,MAAM;AACxC,SAAO,SAAS,KAAK;AACtB;AAEA,MAAM,WAAW;AAEjB,MAAM,QAAQ,OACb,QACA,WAIK;AACL,MAAI;AAwDH,UAAM,EAAE,KAAK,IAAI,MAAM;AAAA,MACtB,gDAAgD,QAAQ,cAAc,OAAO,GAAG,IAAI,OAAO,GAAG,IAAI,OAAO,GAAG,IAAI,OAAO,GAAG;AAAA,IAC3H;AACA,uBAAM,QAAQ,uCAAiB,IAAI;AACnC,QAAI,CAAC,mBAAM,MAAM,uCAAiB,IAAI;AACrC,cAAQ,IAAI,0BAA0B,CAAC,GAAG,mBAAM,OAAO,uCAAiB,IAAI,CAAC,CAAC;AAG/E,UAAM,EAAE,MAAM,SAAS,IAAI,MAAM;AAAA,MAChC,wEAAwE,OAAO,GAAG,IAAI,OAAO,GAAG,IAAI,OAAO,GAAG,IAAI,OAAO,GAAG;AAAA,IAC7H;AACA,uBAAM,QAAQ,uCAAiB,QAAQ;AACvC,QAAI,CAAC,mBAAM,MAAM,uCAAiB,QAAQ;AACzC,cAAQ,IAAI,8BAA8B,CAAC,GAAG,mBAAM,OAAO,uCAAiB,QAAQ,CAAC,CAAC;AAEvF,UAAM,EAAE,MAAM,IAAI,MAAM;AAAA,MACvB,uEAAuE,OAAO,GAAG,IAAI,OAAO,GAAG,IAAI,OAAO,GAAG,IAAI,OAAO,GAAG;AAAA,IAC5H;AACA,uBAAM,QAAQ,yCAAkB,KAAK;AACrC,QAAI,CAAC,mBAAM,MAAM,yCAAkB,KAAK;AACvC,cAAQ,IAAI,2BAA2B,CAAC,GAAG,mBAAM,OAAO,yCAAkB,KAAK,CAAC,CAAC;AAElF,YAAQ,IAAI,YAAY,KAAK,MAAM;AACnC,QAAI,KAAK,SAAS;AAAK,cAAQ,IAAI,YAAY,KAAK,MAAM;AAE1D,YAAQ,IAAI,gBAAgB,SAAS,MAAM;AAC3C,QAAI,SAAS,SAAS;AAAK,cAAQ,IAAI,gBAAgB,SAAS,MAAM;AAEtE,SAAK,KAAK,GAAG,QAAQ;AACrB,UAAM,aAAa,KAAK,OAAO,CAAC,MAAuC,QAAQ;AAC9E,WAAK,SAAK,sBAAM,CAAC,CAAC,IAAI,KAAK,CAAC,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;AAEjD,aAAO;AAAA,IACR,GAAG,CAAC,CAAC;AAGL,UAAM,gBAAY,sBAAO,YAAY,CAACA,WAAO;AAtH/C;AAsHkD,yBAAAA,OAAM,aAAN,mBAAgB,gBAAhB,mBAA6B,KAAK;AAAA,KAAI;AAEtF,UAAM,YAAY,MAAM,OAAO,CAAC,MAA6C,SAAS;AACrF,WAAK,SAAK,qBAAQ,gBAAAC,QAAS,UAAU,KAAK,QAAQ,GAAG,EAAE,GAAG,KAAK,CAAC,CAAC;AAEjE,aAAO;AAAA,IACR,GAAG,CAAC,CAAC;AAEL,WAAO,EAAE,WAAW,UAAU;AAAA,EAC/B,SAAS,OAAO;AACf,YAAQ,MAAM,WAAW,KAAK;AAC9B,WAAO,EAAE,WAAW,CAAC,GAAG,WAAW,CAAC,EAAE;AAAA,EACvC;AACD;",
  "names": ["point", "polyline"]
}
