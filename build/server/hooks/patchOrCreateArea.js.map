{
  "version": 3,
  "sources": ["../../../src/server/hooks/patchOrCreateArea.ts"],
  "sourcesContent": ["import area from \"@turf/area\";\nimport bbox from \"@turf/bbox\";\nimport bboxPolygon from \"@turf/bbox-polygon\";\nimport booleanContains from \"@turf/boolean-contains\";\nimport booleanOverlap from \"@turf/boolean-overlap\";\nimport { Feature, featureCollection, LineString, Point } from \"@turf/helpers\";\nimport pointsWithinPolygon from \"@turf/points-within-polygon\";\nimport square from \"@turf/square\";\nimport squareGrid from \"@turf/square-grid\";\nimport { determineTrapTypes } from \"../../lib/atudo/determineTrapTypes\";\nimport { traps } from \"../../lib/atudo/traps\";\nimport { Scheduler } from \"../../lib/Scheduler\";\n\nimport type { Hook, HookContext } from \"@feathersjs/feathers\";\nimport transformScale from \"@turf/transform-scale\";\nimport { trapsChain } from \"./trapsChain\";\nimport { feature, featureReduce } from \"@turf/turf\";\nimport polyline from \"@mapbox/polyline\";\n\nconst patchOrCreateArea = (): Hook => {\n\treturn async (context: HookContext<radarTrap.Area>) => {\n\t\tconst startTime = performance.now();\n\t\tconst { data, service, params } = context;\n\t\tconst { _id } = data!;\n\n\t\tdata!.timestamp = new Date().toString();\n\n\t\tScheduler.pause(_id);\n\t\tservice.emit(\"status\", { _id: data!._id, status: \"loading\" });\n\n\t\tconst [record] = (await service.find({\n\t\t\tquery: { _id, $select: [\"areaTraps\", \"polysFeatureCollection\"] },\n\t\t\tpaginate: false,\n\t\t})) as Partial<radarTrap.Areas>;\n\n\t\tif (params.patchSourceFromClient || params.patchSourceFromServer) {\n\t\t\tconst areaPolygon = Object.values(data!.areaPolygons!)[0];\n\n\t\t\tconst squareBox = square(bbox(areaPolygon));\n\n\t\t\tconst squareBoxPolygon = transformScale(bboxPolygon(squareBox), 1.3);\n\n\t\t\tconst sideLength = Math.sqrt(area(squareBoxPolygon)) / 1_000;\n\n\t\t\tlet sideLengthDivisor = 0;\n\n\t\t\tif (sideLength > 3000) {\n\t\t\t\tsideLengthDivisor = 80;\n\t\t\t} else if (sideLength > 1_500) {\n\t\t\t\tsideLengthDivisor = 60;\n\t\t\t} else if (sideLength > 900) {\n\t\t\t\tsideLengthDivisor = 25;\n\t\t\t} else if (sideLength > 500) {\n\t\t\t\tsideLengthDivisor = 15;\n\t\t\t} else if (sideLength > 100) {\n\t\t\t\tsideLengthDivisor = 10;\n\t\t\t} else {\n\t\t\t\tsideLengthDivisor = 10;\n\t\t\t}\n\n\t\t\tconst squareBoxGrid = squareGrid(bbox(squareBoxPolygon), sideLength / sideLengthDivisor);\n\n\t\t\tconst reducedSquareBoxGrid = featureCollection(\n\t\t\t\tsquareBoxGrid.features.filter((feature) => {\n\t\t\t\t\treturn booleanOverlap(areaPolygon, feature) || booleanContains(areaPolygon, feature);\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tlet resultPoiPoints: Feature<Point, radarTrap.Poi>[] = [];\n\t\t\tlet resultPolyPoints: Feature<Point, radarTrap.Poly>[] = [];\n\n\t\t\tfor (const feature of reducedSquareBoxGrid.features) {\n\t\t\t\tconst tmpBbox = bbox(feature);\n\n\t\t\t\tconst { polyPoints, poiPoints } = await traps(\n\t\t\t\t\t{\n\t\t\t\t\t\tlng: tmpBbox[0],\n\t\t\t\t\t\tlat: tmpBbox[1],\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlng: tmpBbox[2],\n\t\t\t\t\t\tlat: tmpBbox[3],\n\t\t\t\t\t},\n\t\t\t\t);\n\n\t\t\t\tif (poiPoints.length > 499) console.log(\"gridTraps >>>\", poiPoints.length);\n\n\t\t\t\tresultPolyPoints = resultPolyPoints.concat(polyPoints);\n\t\t\t\tresultPoiPoints = resultPoiPoints.concat(poiPoints);\n\t\t\t}\n\n\t\t\tresultPolyPoints = pointsWithinPolygon(featureCollection(resultPolyPoints), areaPolygon).features;\n\n\t\t\tlet resultPolys: Feature<Point | LineString, radarTrap.Poly>[] = [];\n\t\t\tresultPolys = featureReduce(\n\t\t\t\tfeatureCollection(resultPolyPoints),\n\t\t\t\t(features: Feature<Point | LineString, radarTrap.Poly>[], currentFeature) => {\n\t\t\t\t\tif (currentFeature.properties.type === \"closure\") {\n\t\t\t\t\t\tfeatures.push(currentFeature);\n\n\t\t\t\t\t\tif (currentFeature.properties.polyline !== \"\") {\n\t\t\t\t\t\t\tfeatures.push(\n\t\t\t\t\t\t\t\tfeature<LineString, radarTrap.Poly>(\n\t\t\t\t\t\t\t\t\tpolyline.toGeoJSON(currentFeature.properties.polyline as string),\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t...currentFeature.properties,\n\t\t\t\t\t\t\t\t\t\ttype: \"120\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (currentFeature.properties.type === \"20\") {\n\t\t\t\t\t\tif (currentFeature.properties.polyline !== \"\") {\n\t\t\t\t\t\t\tfeatures.push(\n\t\t\t\t\t\t\t\tfeature<LineString, radarTrap.Poly>(\n\t\t\t\t\t\t\t\t\tpolyline.toGeoJSON(currentFeature.properties.polyline as string),\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t...currentFeature.properties,\n\t\t\t\t\t\t\t\t\t\ttype: \"120\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn features;\n\t\t\t\t},\n\t\t\t\t[],\n\t\t\t);\n\n\t\t\tconst { traps: allPolys } = trapsChain<radarTrap.Poly>(\n\t\t\t\t{ allPolys: record?.polysFeatureCollection?.features || [] },\n\t\t\t\t{ allPolys: resultPolys },\n\t\t\t);\n\t\t\tdata!.polysFeatureCollection = featureCollection(allPolys.allPolys);\n\n\t\t\tresultPoiPoints = pointsWithinPolygon(featureCollection(resultPoiPoints), areaPolygon).features;\n\t\t\tconst resultTypeTraps = determineTrapTypes(resultPoiPoints);\n\t\t\tconst {\n\t\t\t\ttraps: areaTraps,\n\t\t\t\tnewTrapsReduced,\n\t\t\t\trejectedTrapsReduced,\n\t\t\t} = trapsChain(record?.areaTraps, resultTypeTraps);\n\n\t\t\tdata!.areaTraps = areaTraps;\n\t\t\tdata!.areaTrapsNew = newTrapsReduced;\n\t\t\tdata!.areaTrapsRejected = rejectedTrapsReduced;\n\t\t\t// data!.areaTrapsNew = newTraps;\n\t\t\t// data!.areaTrapsEstablished = establishedTraps;\n\t\t\t// data!.areaTrapsRejected = rejectedTraps;\n\t\t}\n\n\t\tif (record !== undefined) {\n\t\t\tcontext.result = await service.patch(_id, data as Partial<radarTrap.Area>, {\n\t\t\t\t...params,\n\t\t\t\tpublishEvent: false,\n\t\t\t});\n\t\t}\n\n\t\tconst endTime = performance.now();\n\t\tconsole.log(`patchOrCreateArea() dauerte: ${(endTime - startTime) / 1_000} Sekunden`);\n\n\t\treturn context;\n\t};\n};\n\nexport { patchOrCreateArea };\n"],
  "mappings": "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",
  "names": ["square", "bbox", "transformScale", "bboxPolygon", "area", "squareGrid", "feature", "booleanOverlap", "booleanContains", "pointsWithinPolygon", "polyline"]
}
