{
  "version": 3,
  "sources": ["../../../src/server/hooks/patchOrCreateArea.ts"],
  "sourcesContent": ["import { featureCollection } from \"@turf/helpers\";\nimport { determineTrapTypes } from \"../../lib/atudo/determineTrapTypes\";\n// import { traps } from \"../../lib/atudo/traps\";\nimport { Scheduler } from \"../../lib/Scheduler\";\n\nimport type { Hook, HookContext } from \"@feathersjs/feathers\";\nimport { trapsChain } from \"./trapsChain\";\nimport getPoiPolyPointsAsync, { AnalyzedType } from \"../../lib/getPoiPolyPointsAsync\";\n\nconst patchOrCreateArea = (): Hook => {\n\treturn async (context: HookContext<radarTrap.Area>) => {\n\t\tconst startTime = performance.now();\n\t\tconst { data, service, params } = context;\n\t\tconst { _id } = data!;\n\n\t\tdata!.timestamp = new Date().toString();\n\n\t\tScheduler.pause(_id);\n\t\tservice.emit(\"status\", { _id: data!._id, status: \"loading\" });\n\n\t\tconst [record] = (await service.find({\n\t\t\tquery: { _id, $select: [\"areaTraps\"] },\n\t\t\tpaginate: false,\n\t\t})) as Partial<radarTrap.Areas>;\n\n\t\tif (params.patchSourceFromClient || params.patchSourceFromServer) {\n\t\t\tconst areaPolygon = Object.values(data!.areaPolygons!)[0];\n\n\t\t\t// eslint-disable-next-line prefer-const\n\t\t\tlet { resultPoiPoints, resultPolyLines } = await getPoiPolyPointsAsync({\n\t\t\t\tanalyzedFeature: areaPolygon,\n\t\t\t\ttype: AnalyzedType.POLYGONE,\n\t\t\t});\n\n\t\t\tif (process.env.NODE_ENV === \"development\") {\n\t\t\t\tconsole.log(\"resultPoiPoints >>>\", resultPoiPoints.length);\n\t\t\t\tconsole.log(\"resultPolyLines >>>\", resultPolyLines.length);\n\t\t\t}\n\n\t\t\tdata!.polyLinesFeatureCollection = featureCollection(resultPolyLines);\n\n\t\t\tconst resultTypeTraps = determineTrapTypes(resultPoiPoints);\n\t\t\tconst {\n\t\t\t\ttraps: areaTraps,\n\t\t\t\testablishedTraps,\n\t\t\t\tnewTraps,\n\t\t\t\trejectedTraps,\n\t\t\t} = trapsChain(record?.areaTraps, resultTypeTraps);\n\n\t\t\tdata!.areaTraps = areaTraps;\n\t\t\tdata!.areaTrapsEstablished = establishedTraps;\n\t\t\tdata!.areaTrapsNew = newTraps;\n\t\t\tdata!.areaTrapsRejected = rejectedTraps;\n\t\t\t// data!.areaTrapsNew = newTraps;\n\t\t\t// data!.areaTrapsRejected = rejectedTraps;\n\t\t}\n\n\t\tif (record !== undefined) {\n\t\t\tcontext.result = await service.patch(_id, data as Partial<radarTrap.Area>, {\n\t\t\t\t...params,\n\t\t\t\tpublishEvent: false,\n\t\t\t});\n\t\t}\n\n\t\tconst endTime = performance.now();\n\t\tif (process.env.NODE_ENV === \"development\")\n\t\t\tconsole.log(`patchOrCreateArea() dauerte: ${(endTime - startTime) / 1_000} Sekunden`);\n\n\t\treturn context;\n\t};\n};\n\nexport { patchOrCreateArea };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAkC;AAClC,gCAAmC;AAEnC,uBAA0B;AAG1B,wBAA2B;AAC3B,mCAAoD;AAEpD,MAAM,oBAAoB,MAAY;AACrC,SAAO,OAAO,YAAyC;AACtD,UAAM,YAAY,YAAY,IAAI;AAClC,UAAM,EAAE,MAAM,SAAS,OAAO,IAAI;AAClC,UAAM,EAAE,IAAI,IAAI;AAEhB,SAAM,aAAY,oBAAI,KAAK,GAAE,SAAS;AAEtC,+BAAU,MAAM,GAAG;AACnB,YAAQ,KAAK,UAAU,EAAE,KAAK,KAAM,KAAK,QAAQ,UAAU,CAAC;AAE5D,UAAM,CAAC,MAAM,IAAK,MAAM,QAAQ,KAAK;AAAA,MACpC,OAAO,EAAE,KAAK,SAAS,CAAC,WAAW,EAAE;AAAA,MACrC,UAAU;AAAA,IACX,CAAC;AAED,QAAI,OAAO,yBAAyB,OAAO,uBAAuB;AACjE,YAAM,cAAc,OAAO,OAAO,KAAM,YAAa,EAAE,CAAC;AAGxD,UAAI,EAAE,iBAAiB,gBAAgB,IAAI,UAAM,6BAAAA,SAAsB;AAAA,QACtE,iBAAiB;AAAA,QACjB,MAAM,0CAAa;AAAA,MACpB,CAAC;AAED,UAAI,OAAwC;AAC3C,gBAAQ,IAAI,uBAAuB,gBAAgB,MAAM;AACzD,gBAAQ,IAAI,uBAAuB,gBAAgB,MAAM;AAAA,MAC1D;AAEA,WAAM,iCAA6B,kCAAkB,eAAe;AAEpE,YAAM,sBAAkB,8CAAmB,eAAe;AAC1D,YAAM;AAAA,QACL,OAAO;AAAA,QACP;AAAA,QACA;AAAA,QACA;AAAA,MACD,QAAI,8BAAW,iCAAQ,WAAW,eAAe;AAEjD,WAAM,YAAY;AAClB,WAAM,uBAAuB;AAC7B,WAAM,eAAe;AACrB,WAAM,oBAAoB;AAAA,IAG3B;AAEA,QAAI,WAAW,QAAW;AACzB,cAAQ,SAAS,MAAM,QAAQ,MAAM,KAAK,MAAiC;AAAA,QAC1E,GAAG;AAAA,QACH,cAAc;AAAA,MACf,CAAC;AAAA,IACF;AAEA,UAAM,UAAU,YAAY,IAAI;AAChC,QAAI;AACH,cAAQ,IAAI,iCAAiC,UAAU,aAAa,GAAK,WAAW;AAErF,WAAO;AAAA,EACR;AACD;",
  "names": ["getPoiPolyPointsAsync"]
}
