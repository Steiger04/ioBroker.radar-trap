{
  "version": 3,
  "sources": ["../../../src/server/hooks/patchOrCreateArea.ts"],
  "sourcesContent": ["import area from \"@turf/area\";\nimport bbox from \"@turf/bbox\";\nimport bboxPolygon from \"@turf/bbox-polygon\";\nimport booleanContains from \"@turf/boolean-contains\";\nimport booleanOverlap from \"@turf/boolean-overlap\";\nimport { feature, Feature, featureCollection, LineString, Point, Properties } from \"@turf/helpers\";\nimport pointsWithinPolygon from \"@turf/points-within-polygon\";\nimport square from \"@turf/square\";\nimport squareGrid from \"@turf/square-grid\";\nimport { determineTrapTypes } from \"../../lib/atudo/determineTrapTypes\";\nimport { traps } from \"../../lib/atudo/traps\";\nimport { Scheduler } from \"../../lib/Scheduler\";\n\nimport type { Hook, HookContext } from \"@feathersjs/feathers\";\nimport polyline from \"@mapbox/polyline\";\nimport { featureReduce } from \"@turf/meta\";\nimport transformScale from \"@turf/transform-scale\";\nimport console from \"console\";\n\nconst patchOrCreateArea = (): Hook => {\n\treturn async (context: HookContext<radarTrap.Area>) => {\n\t\tconst startTime = performance.now();\n\t\tconst { data, service, params } = context;\n\t\tconst { _id } = data!;\n\n\t\tdata!.timestamp = new Date().toString();\n\n\t\tScheduler.pause(_id);\n\t\tservice.emit(\"status\", { _id: data!._id, status: \"loading\" });\n\n\t\tconst [record] = (await service.find({\n\t\t\tquery: { _id },\n\t\t\tpaginate: false,\n\t\t})) as radarTrap.Areas;\n\n\t\t// console.log(\"record\", record);\n\n\t\tif (params.patchSourceFromClient || params.patchSourceFromServer) {\n\t\t\tconst areaPolygon = Object.values(data!.areaPolygons!)[0];\n\t\t\t// console.log(\"areaPolygon\", areaPolygon.geometry.coordinates);\n\n\t\t\tconst areaBox = bbox(areaPolygon);\n\t\t\t// console.log(\"areaBox\", areaBox);\n\n\t\t\tconst squareBox = square(areaBox);\n\t\t\t// console.log(\"squareBox\", squareBox);\n\n\t\t\tconst squareBoxPolygon = transformScale(bboxPolygon(squareBox), 1.3);\n\t\t\t// console.log(\"squareBoxPolygon\", squareBoxPolygon);\n\n\t\t\tconst sideLength = Math.sqrt(area(squareBoxPolygon)) / 1e3;\n\t\t\t// console.log(\"sideLength\", sideLength);\n\n\t\t\tlet sideLengthDivisor = 0;\n\n\t\t\tif (sideLength > 3000) {\n\t\t\t\tsideLengthDivisor = 80;\n\t\t\t} else if (sideLength > 1500) {\n\t\t\t\tsideLengthDivisor = 60;\n\t\t\t} else if (sideLength > 900) {\n\t\t\t\tsideLengthDivisor = 25;\n\t\t\t} else if (sideLength > 500) {\n\t\t\t\tsideLengthDivisor = 15;\n\t\t\t} else if (sideLength > 100) {\n\t\t\t\tsideLengthDivisor = 10;\n\t\t\t} else {\n\t\t\t\tsideLengthDivisor = 10;\n\t\t\t}\n\n\t\t\tconst squareBoxGrid = squareGrid(bbox(squareBoxPolygon), sideLength / sideLengthDivisor);\n\t\t\t// console.log(\"squareBoxGrid\", squareBoxGrid.features.length);\n\n\t\t\tconst reducedSquareBoxGrid = featureCollection(\n\t\t\t\tsquareBoxGrid.features.filter((feature) => {\n\t\t\t\t\t// console.log(\"feature::\", feature.geometry!.coordinates);\n\t\t\t\t\treturn booleanOverlap(areaPolygon, feature) || booleanContains(areaPolygon, feature);\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\t/* console.log(\n\t\t\t\t\"reducedSquareBoxGrid\",\n\t\t\t\treducedSquareBoxGrid.features.length,\n\t\t\t); */\n\n\t\t\tlet resultTraps: Feature<Point>[] | Record<string, Feature<Point, Properties>[]> = [];\n\n\t\t\tlet resultPolyPoints: Feature<Point>[] = [];\n\t\t\tlet resultPolyLines: Feature<Point | LineString>[] = [];\n\n\t\t\tfor (const feature of reducedSquareBoxGrid.features) {\n\t\t\t\tconst tmpBbox = bbox(feature);\n\t\t\t\t// console.log(\"feature coordinates\", tmpBbox);\n\n\t\t\t\tconst { polyPoints, trapPoints: gridTraps } = await traps(\n\t\t\t\t\t{\n\t\t\t\t\t\tlng: tmpBbox[0],\n\t\t\t\t\t\tlat: tmpBbox[1],\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlng: tmpBbox[2],\n\t\t\t\t\t\tlat: tmpBbox[3],\n\t\t\t\t\t},\n\t\t\t\t);\n\n\t\t\t\tif (gridTraps.length > 499) console.log(\"gridTraps >>>\", gridTraps.length);\n\n\t\t\t\tresultTraps = resultTraps.concat(gridTraps);\n\t\t\t\tresultPolyPoints = resultPolyPoints.concat(polyPoints);\n\t\t\t}\n\n\t\t\t// console.log(\"resultPolyPoints\", resultPolyPoints.length);\n\t\t\t// console.log(\"resultTraps\", resultTraps.length);\n\t\t\t// console.log(\"resultTraps\", JSON.stringify(resultTraps, null, 4));\n\n\t\t\tresultTraps = pointsWithinPolygon(featureCollection(resultTraps), areaPolygon).features;\n\n\t\t\tresultPolyPoints = pointsWithinPolygon(featureCollection(resultPolyPoints), areaPolygon).features;\n\n\t\t\t/* console.log(\n\t\t\t\t\"resultPolyPoints after reduction\",\n\t\t\t\tresultPolyPoints.length,\n\t\t\t); */\n\n\t\t\t// console.log(\"resultTraps after reduction\", resultTraps.length);\n\n\t\t\tresultTraps = determineTrapTypes(resultTraps);\n\t\t\t// console.log(\"resultTraps\", JSON.stringify(resultTraps, null, 4));\n\n\t\t\tconst endTime = performance.now();\n\t\t\tconsole.log(`patchOrCreateArea() dauerte: ${(endTime - startTime) / 1_000} Sekunden`);\n\n\t\t\tdata!.areaTraps = resultTraps;\n\n\t\t\t// console.log(\"resultPolyPoints\", resultPolyPoints);\n\n\t\t\tresultPolyLines = featureReduce(\n\t\t\t\tfeatureCollection(resultPolyPoints),\n\t\t\t\t(features: Feature<Point | LineString, Properties>[], tmpFeature) => {\n\t\t\t\t\tfeatures.push(tmpFeature);\n\t\t\t\t\tfeatures.push(\n\t\t\t\t\t\tfeature<LineString, Properties>(polyline.toGeoJSON(tmpFeature.properties!.polyline as string), {\n\t\t\t\t\t\t\t...tmpFeature.properties!,\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\n\t\t\t\t\treturn features;\n\t\t\t\t},\n\t\t\t\t[],\n\t\t\t);\n\n\t\t\tdata!.polysFeatureCollection = featureCollection(resultPolyLines);\n\t\t}\n\n\t\tif (record !== undefined) {\n\t\t\tcontext.result = await service.patch(_id, data as Partial<radarTrap.Area>, {\n\t\t\t\t...params,\n\t\t\t\tpublishEvent: false,\n\t\t\t});\n\n\t\t\treturn context;\n\t\t}\n\n\t\treturn context;\n\t};\n};\n\nexport { patchOrCreateArea };\n"],
  "mappings": "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",
  "names": ["bbox", "square", "transformScale", "bboxPolygon", "area", "squareGrid", "feature", "booleanOverlap", "booleanContains", "console", "pointsWithinPolygon", "polyline"]
}
