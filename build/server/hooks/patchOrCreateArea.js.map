{
  "version": 3,
  "sources": ["../../../src/server/hooks/patchOrCreateArea.ts"],
  "sourcesContent": ["import area from \"@turf/area\";\nimport bbox from \"@turf/bbox\";\nimport bboxPolygon from \"@turf/bbox-polygon\";\nimport booleanContains from \"@turf/boolean-contains\";\nimport booleanOverlap from \"@turf/boolean-overlap\";\nimport { feature, Feature, featureCollection, LineString, Point, Properties } from \"@turf/helpers\";\nimport pointsWithinPolygon from \"@turf/points-within-polygon\";\nimport square from \"@turf/square\";\nimport squareGrid from \"@turf/square-grid\";\nimport { determineTrapTypes } from \"../../lib/atudo/determineTrapTypes\";\nimport { traps } from \"../../lib/atudo/traps\";\nimport { Scheduler } from \"../../lib/Scheduler\";\n\nimport type { Hook, HookContext } from \"@feathersjs/feathers\";\nimport polyline from \"@mapbox/polyline\";\nimport { featureReduce } from \"@turf/meta\";\nimport transformScale from \"@turf/transform-scale\";\nimport console from \"console\";\nimport { differenceBy, mergeWith, intersectionBy, mapKeys, flatten, reduce } from \"lodash\";\n\nconst patchOrCreateArea = (): Hook => {\n\treturn async (context: HookContext<radarTrap.Area>) => {\n\t\tconst startTime = performance.now();\n\t\tconst { data, service, params } = context;\n\t\tconst { _id } = data!;\n\n\t\tdata!.timestamp = new Date().toString();\n\n\t\tScheduler.pause(_id);\n\t\tservice.emit(\"status\", { _id: data!._id, status: \"loading\" });\n\n\t\tconst [record] = (await service.find({\n\t\t\tquery: { _id, $select: [\"areaTraps\"] },\n\t\t\tpaginate: false,\n\t\t})) as Partial<radarTrap.Areas>;\n\n\t\tif (params.patchSourceFromClient || params.patchSourceFromServer) {\n\t\t\tconst areaPolygon = Object.values(data!.areaPolygons!)[0];\n\n\t\t\tconst areaBox = bbox(areaPolygon);\n\n\t\t\tconst squareBox = square(areaBox);\n\n\t\t\tconst squareBoxPolygon = transformScale(bboxPolygon(squareBox), 1.3);\n\n\t\t\tconst sideLength = Math.sqrt(area(squareBoxPolygon)) / 1e3;\n\n\t\t\tlet sideLengthDivisor = 0;\n\n\t\t\tif (sideLength > 3000) {\n\t\t\t\tsideLengthDivisor = 80;\n\t\t\t} else if (sideLength > 1500) {\n\t\t\t\tsideLengthDivisor = 60;\n\t\t\t} else if (sideLength > 900) {\n\t\t\t\tsideLengthDivisor = 25;\n\t\t\t} else if (sideLength > 500) {\n\t\t\t\tsideLengthDivisor = 15;\n\t\t\t} else if (sideLength > 100) {\n\t\t\t\tsideLengthDivisor = 10;\n\t\t\t} else {\n\t\t\t\tsideLengthDivisor = 10;\n\t\t\t}\n\n\t\t\tconst squareBoxGrid = squareGrid(bbox(squareBoxPolygon), sideLength / sideLengthDivisor);\n\n\t\t\tconst reducedSquareBoxGrid = featureCollection(\n\t\t\t\tsquareBoxGrid.features.filter((feature) => {\n\t\t\t\t\treturn booleanOverlap(areaPolygon, feature) || booleanContains(areaPolygon, feature);\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tlet resultTraps: Feature<Point>[] = [];\n\t\t\tlet resultPolyPoints: Feature<Point>[] = [];\n\t\t\tlet resultPolyLines: Feature<Point | LineString>[] = [];\n\n\t\t\tfor (const feature of reducedSquareBoxGrid.features) {\n\t\t\t\tconst tmpBbox = bbox(feature);\n\n\t\t\t\tconst { polyPoints, trapPoints: gridTraps } = await traps(\n\t\t\t\t\t{\n\t\t\t\t\t\tlng: tmpBbox[0],\n\t\t\t\t\t\tlat: tmpBbox[1],\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlng: tmpBbox[2],\n\t\t\t\t\t\tlat: tmpBbox[3],\n\t\t\t\t\t},\n\t\t\t\t);\n\n\t\t\t\tif (gridTraps.length > 499) console.log(\"gridTraps >>>\", gridTraps.length);\n\n\t\t\t\tresultPolyPoints = resultPolyPoints.concat(polyPoints);\n\t\t\t\tresultTraps = resultTraps.concat(gridTraps);\n\t\t\t}\n\n\t\t\tresultPolyPoints = pointsWithinPolygon(featureCollection(resultPolyPoints), areaPolygon).features;\n\t\t\tresultPolyLines = featureReduce(\n\t\t\t\tfeatureCollection(resultPolyPoints),\n\t\t\t\t(features: Feature<Point | LineString, Properties>[], tmpFeature) => {\n\t\t\t\t\tfeatures.push(tmpFeature);\n\t\t\t\t\tfeatures.push(\n\t\t\t\t\t\tfeature<LineString, Properties>(polyline.toGeoJSON(tmpFeature.properties!.polyline as string), {\n\t\t\t\t\t\t\t...tmpFeature.properties!,\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\n\t\t\t\t\treturn features;\n\t\t\t\t},\n\t\t\t\t[],\n\t\t\t);\n\t\t\tdata!.polysFeatureCollection = featureCollection(resultPolyLines);\n\n\t\t\tresultTraps = pointsWithinPolygon(featureCollection(resultTraps), areaPolygon).features;\n\t\t\tconst resultTypeTraps = determineTrapTypes(resultTraps);\n\n\t\t\tconst newTraps = mapKeys(\n\t\t\t\tmergeWith<radarTrap.Area[\"areaTraps\"], radarTrap.Area[\"areaTraps\"]>(\n\t\t\t\t\t{ ...(record?.areaTraps || {}) },\n\t\t\t\t\tresultTypeTraps,\n\t\t\t\t\t(objValue, srcValue) =>\n\t\t\t\t\t\tdifferenceBy<Feature<Point>, Feature<Point>>(\n\t\t\t\t\t\t\tsrcValue,\n\t\t\t\t\t\t\tobjValue || [],\n\t\t\t\t\t\t\t\"properties.backend\",\n\t\t\t\t\t\t).map((item) => ({\n\t\t\t\t\t\t\t...item,\n\t\t\t\t\t\t\tproperties: { ...item.properties, status: \"NEW\" },\n\t\t\t\t\t\t})),\n\t\t\t\t),\n\t\t\t\t(_, key) => `${key}New`,\n\t\t\t);\n\t\t\tif (process.env.NODE_ENV === \"development\") console.log(\"newTraps >>>\", newTraps);\n\n\t\t\tconst establishedTraps = mapKeys(\n\t\t\t\tmergeWith<radarTrap.Area[\"areaTraps\"], radarTrap.Area[\"areaTraps\"]>(\n\t\t\t\t\t{ ...(record?.areaTraps || {}) },\n\t\t\t\t\tresultTypeTraps,\n\t\t\t\t\t(objValue, srcValue) =>\n\t\t\t\t\t\tintersectionBy<Feature<Point>, Feature<Point>>(\n\t\t\t\t\t\t\tobjValue || [],\n\t\t\t\t\t\t\tsrcValue,\n\t\t\t\t\t\t\t\"properties.backend\",\n\t\t\t\t\t\t).map((item) => ({\n\t\t\t\t\t\t\t...item,\n\t\t\t\t\t\t\tproperties: { ...item.properties, status: \"ESTABLISHED\" },\n\t\t\t\t\t\t})),\n\t\t\t\t),\n\t\t\t\t(_, key) => `${key}Established`,\n\t\t\t);\n\t\t\tif (process.env.NODE_ENV === \"development\") console.log(\"establishedTraps >>>\", establishedTraps);\n\n\t\t\tconst rejectedTraps = mapKeys(\n\t\t\t\tmergeWith<radarTrap.Area[\"areaTraps\"], radarTrap.Area[\"areaTraps\"]>(\n\t\t\t\t\t{ ...(record?.areaTraps || {}) },\n\t\t\t\t\tresultTypeTraps,\n\t\t\t\t\t(objValue, srcValue) =>\n\t\t\t\t\t\tdifferenceBy<Feature<Point>, Feature<Point>>(\n\t\t\t\t\t\t\tobjValue || [],\n\t\t\t\t\t\t\tsrcValue,\n\t\t\t\t\t\t\t\"properties.backend\",\n\t\t\t\t\t\t).map((item) => ({\n\t\t\t\t\t\t\t...item,\n\t\t\t\t\t\t\tproperties: { ...item.properties, status: \"REJECTED\" },\n\t\t\t\t\t\t})),\n\t\t\t\t),\n\t\t\t\t(_, key) => `${key}Rejected`,\n\t\t\t);\n\t\t\tif (process.env.NODE_ENV === \"development\") console.log(\"rejectedTraps >>>\", rejectedTraps);\n\n\t\t\tconst areaTraps = mergeWith<radarTrap.Area[\"areaTraps\"], radarTrap.Area[\"areaTraps\"]>(\n\t\t\t\t{ ...mapKeys(establishedTraps, (_, key) => key.substring(0, key.length - 11)) },\n\t\t\t\tmapKeys(newTraps, (_, key) => key.substring(0, key.length - 3)),\n\t\t\t\t(objValue, srcValue) => flatten<Feature<Point>>([objValue, srcValue]),\n\t\t\t);\n\t\t\tif (process.env.NODE_ENV === \"development\") console.log(\"areaTraps >>>\", areaTraps);\n\n\t\t\tconst newTrapsReduced = reduce<\n\t\t\t\tNonNullable<radarTrap.Area[\"areaTrapsNew\"]>,\n\t\t\t\tNonNullable<radarTrap.Area[\"areaTrapsNew\"]>\n\t\t\t>(\n\t\t\t\tnewTraps,\n\t\t\t\tfunction (acc, value) {\n\t\t\t\t\tacc.trapsNew.push(...value);\n\t\t\t\t\treturn acc;\n\t\t\t\t},\n\t\t\t\t{ trapsNew: [] },\n\t\t\t);\n\t\t\tif (process.env.NODE_ENV === \"development\") console.log(\"newTrapsReduced >>>\", newTrapsReduced);\n\n\t\t\tconst rejectedTrapsReduced = reduce<\n\t\t\t\tNonNullable<radarTrap.Area[\"areaTrapsRejected\"]>,\n\t\t\t\tNonNullable<radarTrap.Area[\"areaTrapsRejected\"]>\n\t\t\t>(\n\t\t\t\trejectedTraps,\n\t\t\t\tfunction (acc, value) {\n\t\t\t\t\tacc.trapsRejected.push(...value);\n\t\t\t\t\treturn acc;\n\t\t\t\t},\n\t\t\t\t{ trapsRejected: [] },\n\t\t\t);\n\t\t\tif (process.env.NODE_ENV === \"development\") console.log(\"rejectedTrapsReduced >>>\", rejectedTrapsReduced);\n\n\t\t\tdata!.areaTraps = areaTraps;\n\t\t\tdata!.areaTrapsNew = newTrapsReduced;\n\t\t\tdata!.areaTrapsRejected = rejectedTrapsReduced;\n\t\t\t// data!.areaTrapsNew = newTraps;\n\t\t\t// data!.areaTrapsEstablished = establishedTraps;\n\t\t\t// data!.areaTrapsRejected = rejectedTraps;\n\t\t}\n\n\t\tif (record !== undefined) {\n\t\t\tcontext.result = await service.patch(_id, data as Partial<radarTrap.Area>, {\n\t\t\t\t...params,\n\t\t\t\tpublishEvent: false,\n\t\t\t});\n\t\t}\n\n\t\tconst endTime = performance.now();\n\t\tconsole.log(`patchOrCreateArea() dauerte: ${(endTime - startTime) / 1_000} Sekunden`);\n\n\t\treturn context;\n\t};\n};\n\nexport { patchOrCreateArea };\n"],
  "mappings": "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",
  "names": ["bbox", "square", "transformScale", "bboxPolygon", "area", "squareGrid", "feature", "booleanOverlap", "booleanContains", "console", "pointsWithinPolygon", "polyline"]
}
