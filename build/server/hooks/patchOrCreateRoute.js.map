{
  "version": 3,
  "sources": ["../../../src/server/hooks/patchOrCreateRoute.ts"],
  "sourcesContent": ["import Directions, {\n\tDirectionsResponse,\n\tDirectionsService,\n\tDirectionsWaypoint,\n} from \"@mapbox/mapbox-sdk/services/directions\";\nimport Matrix, { MatrixService } from \"@mapbox/mapbox-sdk/services/matrix\";\nimport { performance } from \"perf_hooks\";\nimport { getTrapsFromDirection } from \"../../lib/getTrapsFromDirection\";\nimport { Scheduler } from \"../../lib/Scheduler\";\nimport { trapsChain } from \"./trapsChain\";\n\nimport type { Hook, HookContext } from \"@feathersjs/feathers\";\n\nconst patchOrCreateRoute = (): Hook => {\n\tlet directionsService: DirectionsService | null = null;\n\tlet matrixService: MatrixService | null = null;\n\n\treturn async (context: HookContext<radarTrap.Route>) => {\n\t\tif (!directionsService) {\n\t\t\tdirectionsService = Directions({\n\t\t\t\taccessToken: process.env.MAPBOX_TOKEN!,\n\t\t\t});\n\t\t}\n\n\t\tif (!matrixService) {\n\t\t\tmatrixService = Matrix({\n\t\t\t\taccessToken: process.env.MAPBOX_TOKEN!,\n\t\t\t});\n\t\t}\n\n\t\tconst { data, service, params } = context;\n\t\tconst { _id, activeProfile, maxTrapDistance } = data!;\n\n\t\tdata!.timestamp = new Date().toString();\n\n\t\tScheduler.pause(_id);\n\t\tservice.emit(\"status\", { _id: data!._id, status: \"loading\" });\n\n\t\tconst [record] = (await service.find({\n\t\t\tquery: { _id },\n\t\t\tpaginate: false,\n\t\t})) as radarTrap.Routes;\n\n\t\tif (params.patchSourceFromClient || params.patchSourceFromServer) {\n\t\t\tconst matrix = await matrixService\n\t\t\t\t.getMatrix({\n\t\t\t\t\tpoints: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcoordinates: data!.src.geometry.coordinates,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcoordinates: data!.dst.geometry.coordinates,\n\t\t\t\t\t\t},\n\t\t\t\t\t] as DirectionsWaypoint[],\n\t\t\t\t\tsources: [0],\n\t\t\t\t\t//destinations: [1],\n\t\t\t\t\tprofile: activeProfile!.name,\n\t\t\t\t\tannotations: [\"duration\", \"distance\"],\n\t\t\t\t})\n\t\t\t\t.send()\n\t\t\t\t.then((response) => response.body);\n\n\t\t\tconsole.log(\"matrix\", matrix);\n\n\t\t\tconst directions = await directionsService\n\t\t\t\t.getDirections({\n\t\t\t\t\tprofile: activeProfile!.name,\n\t\t\t\t\texclude:\n\t\t\t\t\t\tactiveProfile!.actualExclusion.length > 0\n\t\t\t\t\t\t\t? (activeProfile!.actualExclusion.join(\",\") as any)\n\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\toverview: \"full\",\n\t\t\t\t\t/* annotations: [\n\t\t\t\t\t\t\"distance\",\n\t\t\t\t\t\t\"duration\",\n\t\t\t\t\t\t\"congestion\",\n\t\t\t\t\t\t\"speed\",\n\t\t\t\t\t], */\n\t\t\t\t\talternatives: false,\n\t\t\t\t\twaypoints: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcoordinates: data!.src.geometry.coordinates,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcoordinates: data!.dst.geometry.coordinates,\n\t\t\t\t\t\t},\n\t\t\t\t\t] as DirectionsWaypoint[],\n\t\t\t\t})\n\t\t\t\t.send()\n\t\t\t\t.then((response) => response.body)\n\t\t\t\t.catch((ex) => {\n\t\t\t\t\tconsole.log(\"Error in directionsService.getDirections()\", ex);\n\t\t\t\t});\n\n\t\t\tdata!.directions = [];\n\n\t\t\tfor (const route of (directions as DirectionsResponse<string>).routes) {\n\t\t\t\ttry {\n\t\t\t\t\tconst startTime = performance.now();\n\t\t\t\t\tconst traps = await getTrapsFromDirection({\n\t\t\t\t\t\tdirection: route.geometry,\n\t\t\t\t\t\tmaxTrapDistance,\n\t\t\t\t\t});\n\n\t\t\t\t\tconst endTime = performance.now();\n\t\t\t\t\tconsole.log(`getTrapsFrom() dauerte: ${(endTime - startTime) / 1_000} Sekunden`);\n\n\t\t\t\t\troute.duration = matrix.durations![0][1];\n\t\t\t\t\tconst length = data!.directions.push({ direction: route, matrix });\n\n\t\t\t\t\tconst {\n\t\t\t\t\t\ttraps: routeTraps,\n\t\t\t\t\t\tnewTrapsReduced,\n\t\t\t\t\t\trejectedTrapsReduced,\n\t\t\t\t\t} = trapsChain(record?.directions![length - 1].routeTraps, traps);\n\n\t\t\t\t\tdata!.directions[length - 1].routeTraps = routeTraps;\n\t\t\t\t\tdata!.directions[length - 1].routeTrapsNew = newTrapsReduced;\n\t\t\t\t\tdata!.directions[length - 1].routeTrapsRejected = rejectedTrapsReduced;\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.log(error);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (record !== undefined) {\n\t\t\tcontext.result = await service.patch(_id, data as Partial<radarTrap.Route>, {\n\t\t\t\t...params,\n\t\t\t\tpublishEvent: false,\n\t\t\t});\n\n\t\t\t// return context;\n\t\t}\n\n\t\treturn context;\n\t};\n};\n\nexport { patchOrCreateRoute };\n"],
  "mappings": "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",
  "names": ["Directions", "Matrix"]
}
