{
  "version": 3,
  "sources": ["../../../src/server/hooks/trapsChain.ts"],
  "sourcesContent": ["import { differenceBy, mergeWith, intersectionBy, mapKeys, flatten, reduce } from \"lodash\";\n\nimport type { Feature, Point, LineString } from \"@turf/helpers\";\n\nconst trapsChain = <\n\tT extends radarTrap.Poi | radarTrap.Poly,\n\tF extends Feature<Point | LineString, T> = Feature<Point | LineString, T>,\n>(\n\trecord = {} as Record<string, F[]>,\n\tresult = {} as Record<string, F[]>,\n): {\n\tnewTraps: Record<string, F[]>;\n\testablishedTraps: Record<string, F[]>;\n\trejectedTraps: Record<string, F[]>;\n\ttraps: Record<string, F[]>;\n\tnewTrapsReduced: Record<string, F[]>;\n\trejectedTrapsReduced: Record<string, F[]>;\n} => {\n\tconst newTraps = mapKeys(\n\t\tmergeWith({ ...record }, result, (recordValue, resultValue) =>\n\t\t\tdifferenceBy<F, F>(resultValue, recordValue || [], \"properties.backend\").map((item) => ({\n\t\t\t\t...item,\n\t\t\t\tproperties: { ...item.properties, status: \"NEW\" },\n\t\t\t})),\n\t\t),\n\t\t(_, key) => `${key}New`,\n\t) as Record<string, F[]>;\n\t// if (process.env.NODE_ENV === \"development\") console.log(\"newTraps >>>\", newTraps);\n\n\tconst establishedTraps = mapKeys(\n\t\tmergeWith({ ...record }, result, (recordValue, resultValue) =>\n\t\t\tintersectionBy<F, F>(recordValue || [], resultValue, \"properties.backend\").map((item) => ({\n\t\t\t\t...item,\n\t\t\t\tproperties: { ...item.properties, status: \"ESTABLISHED\" },\n\t\t\t})),\n\t\t),\n\t\t(_, key) => `${key}Established`,\n\t) as Record<string, F[]>;\n\t// if (process.env.NODE_ENV === \"development\") console.log(\"establishedTraps >>>\", establishedTraps);\n\n\tconst rejectedTraps = mapKeys(\n\t\tmergeWith({ ...record }, result, (recordValue, resultValue) =>\n\t\t\tdifferenceBy<F, F>(recordValue || [], resultValue, \"properties.backend\").map((item) => ({\n\t\t\t\t...item,\n\t\t\t\tproperties: { ...item.properties, status: \"REJECTED\" },\n\t\t\t})),\n\t\t),\n\t\t(_, key) => `${key}Rejected`,\n\t) as Record<string, F[]>;\n\t// if (process.env.NODE_ENV === \"development\") console.log(\"rejectedTraps >>>\", rejectedTraps);\n\n\tconst traps = mergeWith(\n\t\t{ ...mapKeys(establishedTraps, (_, key) => key.substring(0, key.length - 11)) },\n\t\tmapKeys(newTraps, (_, key) => key.substring(0, key.length - 3)),\n\t\t(objValue, srcValue) => flatten<F>([objValue, srcValue]),\n\t) as Record<string, F[]>;\n\t// if (process.env.NODE_ENV === \"development\") console.log(\"traps >>>\", traps);\n\n\tconst newTrapsReduced = reduce(\n\t\tnewTraps,\n\t\tfunction (acc, value) {\n\t\t\tacc.trapsNew.push(...value);\n\t\t\treturn acc;\n\t\t},\n\t\t{ trapsNew: [] } as unknown as Record<string, F[]>,\n\t);\n\t// if (process.env.NODE_ENV === \"development\") console.log(\"newTrapsReduced >>>\", newTrapsReduced);\n\n\tconst rejectedTrapsReduced = reduce(\n\t\trejectedTraps,\n\t\tfunction (acc, value) {\n\t\t\tacc.trapsRejected.push(...value);\n\n\t\t\treturn acc;\n\t\t},\n\t\t{ trapsRejected: [] } as unknown as Record<string, F[]>,\n\t);\n\t// if (process.env.NODE_ENV === \"development\") console.log(\"rejectedTrapsReduced >>>\", rejectedTrapsReduced);\n\n\treturn { traps, newTraps, establishedTraps, rejectedTraps, newTrapsReduced, rejectedTrapsReduced };\n};\n\nexport { trapsChain };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAkF;AAIlF,MAAM,aAAa,CAIlB,SAAS,CAAC,GACV,SAAS,CAAC,MAQN;AACJ,QAAM,eAAW;AAAA,QAChB;AAAA,MAAU,EAAE,GAAG,OAAO;AAAA,MAAG;AAAA,MAAQ,CAAC,aAAa,oBAC9C,4BAAmB,aAAa,eAAe,CAAC,GAAG,oBAAoB,EAAE,IAAI,CAAC,UAAU;AAAA,QACvF,GAAG;AAAA,QACH,YAAY,EAAE,GAAG,KAAK,YAAY,QAAQ,MAAM;AAAA,MACjD,EAAE;AAAA,IACH;AAAA,IACA,CAAC,GAAG,QAAQ,GAAG,GAAG;AAAA,EACnB;AAGA,QAAM,uBAAmB;AAAA,QACxB;AAAA,MAAU,EAAE,GAAG,OAAO;AAAA,MAAG;AAAA,MAAQ,CAAC,aAAa,oBAC9C,8BAAqB,eAAe,CAAC,GAAG,aAAa,oBAAoB,EAAE,IAAI,CAAC,UAAU;AAAA,QACzF,GAAG;AAAA,QACH,YAAY,EAAE,GAAG,KAAK,YAAY,QAAQ,cAAc;AAAA,MACzD,EAAE;AAAA,IACH;AAAA,IACA,CAAC,GAAG,QAAQ,GAAG,GAAG;AAAA,EACnB;AAGA,QAAM,oBAAgB;AAAA,QACrB;AAAA,MAAU,EAAE,GAAG,OAAO;AAAA,MAAG;AAAA,MAAQ,CAAC,aAAa,oBAC9C,4BAAmB,eAAe,CAAC,GAAG,aAAa,oBAAoB,EAAE,IAAI,CAAC,UAAU;AAAA,QACvF,GAAG;AAAA,QACH,YAAY,EAAE,GAAG,KAAK,YAAY,QAAQ,WAAW;AAAA,MACtD,EAAE;AAAA,IACH;AAAA,IACA,CAAC,GAAG,QAAQ,GAAG,GAAG;AAAA,EACnB;AAGA,QAAM,YAAQ;AAAA,IACb,EAAE,OAAG,uBAAQ,kBAAkB,CAAC,GAAG,QAAQ,IAAI,UAAU,GAAG,IAAI,SAAS,EAAE,CAAC,EAAE;AAAA,QAC9E,uBAAQ,UAAU,CAAC,GAAG,QAAQ,IAAI,UAAU,GAAG,IAAI,SAAS,CAAC,CAAC;AAAA,IAC9D,CAAC,UAAU,iBAAa,uBAAW,CAAC,UAAU,QAAQ,CAAC;AAAA,EACxD;AAGA,QAAM,sBAAkB;AAAA,IACvB;AAAA,IACA,SAAU,KAAK,OAAO;AACrB,UAAI,SAAS,KAAK,GAAG,KAAK;AAC1B,aAAO;AAAA,IACR;AAAA,IACA,EAAE,UAAU,CAAC,EAAE;AAAA,EAChB;AAGA,QAAM,2BAAuB;AAAA,IAC5B;AAAA,IACA,SAAU,KAAK,OAAO;AACrB,UAAI,cAAc,KAAK,GAAG,KAAK;AAE/B,aAAO;AAAA,IACR;AAAA,IACA,EAAE,eAAe,CAAC,EAAE;AAAA,EACrB;AAGA,SAAO,EAAE,OAAO,UAAU,kBAAkB,eAAe,iBAAiB,qBAAqB;AAClG;",
  "names": []
}
