{
  "version": 3,
  "sources": ["../../../src/server/httpsOrHttp/httpsOrHttp.ts"],
  "sourcesContent": ["import express from \"express\";\nimport http from \"http\";\nimport http2 from \"http2\";\nimport { getCertificate } from \"./getCertificate\";\n\nconst httpsOrHttp = async (options: any, callback: any): Promise<void> => {\n\tif (!options) {\n\t\tthrow new Error(\"Options are missing.\");\n\t}\n\tif (!options.app) {\n\t\tthrow new Error(\"App is missing.\");\n\t}\n\tif (!options.ports) {\n\t\tthrow new Error(\"Ports are missing.\");\n\t}\n\tif (!options.ports.http) {\n\t\tthrow new Error(\"Http port is missing.\");\n\t}\n\tif (!options.ports.https) {\n\t\tthrow new Error(\"Https port is missing.\");\n\t}\n\tif (!callback) {\n\t\tthrow new Error(\"Callback is missing.\");\n\t}\n\n\tlet certificate;\n\n\ttry {\n\t\tcertificate = await getCertificate(options.that);\n\t} catch {\n\t\tcertificate = undefined;\n\t}\n\n\tif (certificate) {\n\t\thttp2\n\t\t\t.createSecureServer(\n\t\t\t\t{ key: certificate.privateKey, cert: certificate.certificate },\n\t\t\t\toptions.app,\n\t\t\t)\n\t\t\t.listen(options.ports.https, () => {\n\t\t\t\tconst redirectApp = express();\n\n\t\t\t\tredirectApp.get(/.*/u, (req: any, res: any) => {\n\t\t\t\t\tres.redirect(\n\t\t\t\t\t\t`https://${req.headers.host.replace(\n\t\t\t\t\t\t\t`:${options.ports.http}`,\n\t\t\t\t\t\t\t`:${options.ports.https}`,\n\t\t\t\t\t\t)}${req.url}`,\n\t\t\t\t\t);\n\t\t\t\t});\n\n\t\t\t\thttp.createServer(redirectApp).listen(\n\t\t\t\t\toptions.ports.http,\n\t\t\t\t\t() => {\n\t\t\t\t\t\tcallback(null, {\n\t\t\t\t\t\t\tapp: {\n\t\t\t\t\t\t\t\tprotocol: \"https\",\n\t\t\t\t\t\t\t\tport: options.ports.https,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tredirect: {\n\t\t\t\t\t\t\t\tprotocol: \"http\",\n\t\t\t\t\t\t\t\tport: options.ports.http,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t});\n\n\t\treturn;\n\t}\n\n\thttp.createServer(options.app).listen(options.ports.http, () => {\n\t\tcallback(null, {\n\t\t\tapp: { protocol: \"http\", port: options.ports.http },\n\t\t});\n\t});\n};\n\nexport { httpsOrHttp };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAoB;AACpB,kBAAiB;AACjB,mBAAkB;AAClB,4BAA+B;AAE/B,MAAM,cAAc,OAAO,SAAc,aAAiC;AACzE,MAAI,CAAC,SAAS;AACb,UAAM,IAAI,MAAM,sBAAsB;AAAA,EACvC;AACA,MAAI,CAAC,QAAQ,KAAK;AACjB,UAAM,IAAI,MAAM,iBAAiB;AAAA,EAClC;AACA,MAAI,CAAC,QAAQ,OAAO;AACnB,UAAM,IAAI,MAAM,oBAAoB;AAAA,EACrC;AACA,MAAI,CAAC,QAAQ,MAAM,MAAM;AACxB,UAAM,IAAI,MAAM,uBAAuB;AAAA,EACxC;AACA,MAAI,CAAC,QAAQ,MAAM,OAAO;AACzB,UAAM,IAAI,MAAM,wBAAwB;AAAA,EACzC;AACA,MAAI,CAAC,UAAU;AACd,UAAM,IAAI,MAAM,sBAAsB;AAAA,EACvC;AAEA,MAAI;AAEJ,MAAI;AACH,kBAAc,UAAM,sCAAe,QAAQ,IAAI;AAAA,EAChD,QAAE;AACD,kBAAc;AAAA,EACf;AAEA,MAAI,aAAa;AAChB,iBAAAA,QACE;AAAA,MACA,EAAE,KAAK,YAAY,YAAY,MAAM,YAAY,YAAY;AAAA,MAC7D,QAAQ;AAAA,IACT,EACC,OAAO,QAAQ,MAAM,OAAO,MAAM;AAClC,YAAM,kBAAc,eAAAC,SAAQ;AAE5B,kBAAY,IAAI,OAAO,CAAC,KAAU,QAAa;AAC9C,YAAI;AAAA,UACH,WAAW,IAAI,QAAQ,KAAK;AAAA,YAC3B,IAAI,QAAQ,MAAM;AAAA,YAClB,IAAI,QAAQ,MAAM;AAAA,UACnB,IAAI,IAAI;AAAA,QACT;AAAA,MACD,CAAC;AAED,kBAAAC,QAAK,aAAa,WAAW,EAAE;AAAA,QAC9B,QAAQ,MAAM;AAAA,QACd,MAAM;AACL,mBAAS,MAAM;AAAA,YACd,KAAK;AAAA,cACJ,UAAU;AAAA,cACV,MAAM,QAAQ,MAAM;AAAA,YACrB;AAAA,YACA,UAAU;AAAA,cACT,UAAU;AAAA,cACV,MAAM,QAAQ,MAAM;AAAA,YACrB;AAAA,UACD,CAAC;AAAA,QACF;AAAA,MACD;AAAA,IACD,CAAC;AAEF;AAAA,EACD;AAEA,cAAAA,QAAK,aAAa,QAAQ,GAAG,EAAE,OAAO,QAAQ,MAAM,MAAM,MAAM;AAC/D,aAAS,MAAM;AAAA,MACd,KAAK,EAAE,UAAU,QAAQ,MAAM,QAAQ,MAAM,KAAK;AAAA,IACnD,CAAC;AAAA,EACF,CAAC;AACF;",
  "names": ["http2", "express", "http"]
}
