{
  "version": 3,
  "sources": ["../../src/server/app.ts"],
  "sourcesContent": ["// Import favicon from 'serve-favicon';\n// import configuration from '@feathersjs/configuration';\n\nimport express from \"@feathersjs/express\";\nimport feathers, { HookContext as FeathersHookContext } from \"@feathersjs/feathers\";\nimport socketio from \"@feathersjs/socketio\";\nimport compress from \"compression\";\nimport cors from \"cors\";\nimport helmet from \"helmet\";\nimport path from \"path\";\n\nimport appHooks from \"./app.hooks\";\nimport channels from \"./channels\";\nimport logger from \"./logger\";\nimport middleware from \"./middleware\";\nimport services from \"./services\";\n\nimport type { Application } from \"./declarations\";\n\n// console.log(\"### APP.TS ###\");\n\n// Don't remove this comment. It's needed to format import lines nicely.\n\nprocess.env.NODE_CONFIG_DIR = path.join(__dirname, \"config/\");\n// Process.env['NODE_ENV'] = 'production';\n\n// console.log(\"NODE_CONFIG_DIR\", process.env.NODE_CONFIG_DIR);\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst configuration = require(\"@feathersjs/configuration\");\n\nconst app: Application = express(feathers());\n\nexport type HookContext<T = any> = {\n\tapp: Application;\n} & FeathersHookContext<T>;\n\n// Load app configuration\napp.configure(configuration());\n\n// Enable security, CORS, compression, favicon and body parsing\napp.use(\n\thelmet({\n\t\tcontentSecurityPolicy: false,\n\t}),\n);\napp.use(cors());\napp.use(compress());\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n// App.use(favicon(path.join(app.get('public'), 'favicon.ico')));\n// Host the public folder\n// app.use('/', express.static(app.get('public')));\n\n// Set up Plugins and providers\nif (process.env.NODE_ENV === \"development\") app.configure(express.rest());\napp.configure(socketio());\n\n// Configure other middleware (see `middleware/index.ts`)\napp.configure(middleware);\n\n// Set up our services (see `services/index.ts`)\napp.configure(services);\n\n// Set up event channels (see channels.ts)\napp.configure(channels);\n\n// Configure a middleware for 404s and the error handler\napp.use(express.notFound());\napp.use(express.errorHandler({ logger }));\n\napp.hooks(appHooks);\n\nexport default app;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,qBAAoB;AACpB,sBAA6D;AAC7D,sBAAqB;AACrB,yBAAqB;AACrB,kBAAiB;AACjB,oBAAmB;AACnB,kBAAiB;AAEjB,iBAAqB;AACrB,sBAAqB;AACrB,oBAAmB;AACnB,wBAAuB;AACvB,sBAAqB;AAQrB,QAAQ,IAAI,kBAAkB,YAAAA,QAAK,KAAK,WAAW,SAAS;AAM5D,MAAM,gBAAgB,QAAQ,2BAA2B;AAEzD,MAAM,UAAmB,eAAAC,aAAQ,gBAAAC,SAAS,CAAC;AAO3C,IAAI,UAAU,cAAc,CAAC;AAG7B,IAAI;AAAA,MACH,cAAAC,SAAO;AAAA,IACN,uBAAuB;AAAA,EACxB,CAAC;AACF;AACA,IAAI,QAAI,YAAAC,SAAK,CAAC;AACd,IAAI,QAAI,mBAAAC,SAAS,CAAC;AAClB,IAAI,IAAI,eAAAJ,QAAQ,KAAK,CAAC;AACtB,IAAI,IAAI,eAAAA,QAAQ,WAAW,EAAE,UAAU,KAAK,CAAC,CAAC;AAO9C,IAAI;AAAwC,MAAI,UAAU,eAAAA,QAAQ,KAAK,CAAC;AACxE,IAAI,cAAU,gBAAAK,SAAS,CAAC;AAGxB,IAAI,UAAU,kBAAAC,OAAU;AAGxB,IAAI,UAAU,gBAAAC,OAAQ;AAGtB,IAAI,UAAU,gBAAAC,OAAQ;AAGtB,IAAI,IAAI,eAAAR,QAAQ,SAAS,CAAC;AAC1B,IAAI,IAAI,eAAAA,QAAQ,aAAa,EAAE,sBAAAS,QAAO,CAAC,CAAC;AAExC,IAAI,MAAM,WAAAC,OAAQ;AAElB,IAAO,cAAQ;",
  "names": ["path", "express", "feathers", "helmet", "cors", "compress", "socketio", "middleware", "services", "channels", "logger", "appHooks"]
}
